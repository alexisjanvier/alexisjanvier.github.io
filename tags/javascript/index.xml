<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on alexisjanvier.net</title>
    <link>http://alexisjanvier.github.io/tags/javascript/index.xml</link>
    <description>Recent content in Javascript on alexisjanvier.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-fr</language>
    <copyright>mon copyright</copyright>
    <atom:link href="http://alexisjanvier.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Yarn</title>
      <link>http://alexisjanvier.github.io/blog/yarn/</link>
      <pubDate>Wed, 02 Nov 2016 21:35:26 +0100</pubDate>
      
      <guid>http://alexisjanvier.github.io/blog/yarn/</guid>
      <description>

&lt;p&gt;&lt;code&gt;npm&lt;/code&gt; n&amp;rsquo;est sans doute pas l&amp;rsquo;outil le plus handicapant de la stack javascript. C&amp;rsquo;est même franchement bien. Mais, c&amp;rsquo;est vrai, c&amp;rsquo;est parfois lent,
parfois surprenant dans un worflow d&amp;rsquo;intégration continue, et le &lt;code&gt;npm shrinkwrap&lt;/code&gt; est parfois plus source de problèmes que de solutions. Ce que promet &lt;a href=&#34;https://yarnpkg.com/&#34;&gt;Yarn&lt;/a&gt;: de la rapidité et une bonne gestion des versions des modules.&lt;/p&gt;

&lt;h2 id=&#34;premier-test-en-local&#34;&gt;Premier test en local&lt;/h2&gt;

&lt;p&gt;Yarn s&amp;rsquo;installe très simplement avec &amp;hellip; &lt;code&gt;npm&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm i -g yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Je vais tester sur un projet ayant beaucoup (trop ;) ) de dépendances: le &lt;a href=&#34;https://github.com/marmelab/javascript-boilerplate&#34;&gt;boilereplate javascript&lt;/a&gt; de Marmelab.
Pour une première installation, après clonage du repo, voilà le comparatif:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm: 1min 30s
yarn: 1min 17s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rien de très fulgurant. Le projet n&amp;rsquo;avait pas de fichier &lt;code&gt;npm-shrinkwrap.json&lt;/code&gt;, ni de fait de &lt;code&gt;yarn.lock&lt;/code&gt;.
  Après avoir supprimer le répertoire &lt;code&gt;node_modules&lt;/code&gt;, je relance une installation. Maintenant, le résultat est beaucoup plus probant.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm: 1min 11s
yarn: 15s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Effectivement, une fois le cache chauffé, Yarn est vraiment plus rapide&lt;/p&gt;

&lt;h2 id=&#34;yarn-dans-un-docker&#34;&gt;Yarn dans un docker&lt;/h2&gt;

&lt;p&gt;Si npm est un peu lent, c&amp;rsquo;est rarement un problème en cours de développement en local. Par contre, cela peut être plus problématique pour les builds et les tests sur un serveur d&amp;rsquo;intégration continue.
Je conseille donc l&amp;rsquo;article de Martino Fornasa, &lt;a href=&#34;https://hackernoon.com/using-yarn-with-docker-c116ad289d56#.rz7m1fh58&#34;&gt;Using Yarn with Docker&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Il s&amp;rsquo;agit d&amp;rsquo;un test très rapide, mais en partie concluant. Je ne pense pas utiliser Yarn sur des projets clients pour le moment.
Mais comme outil quotidien pour des tests ou des projets perso, oui, sûrement. Je ne suis pas fan de l&amp;rsquo;idée que Facebook soit en train de truster tellement d&amp;rsquo;outils js.
Et qui sait, cela mettra j&amp;rsquo;espère un coup de fouet à l&amp;rsquo;équipe de npm pour que la v4 revienne avec un gain de performance conséquent.&lt;/p&gt;

&lt;h3 id=&#34;note&#34;&gt;Note&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://shift.infinite.red/npm-vs-yarn-cheat-sheet-8755b092e5cc#.8dakk7y15&#34;&gt;une cheat-sheet yarn vs npm&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>