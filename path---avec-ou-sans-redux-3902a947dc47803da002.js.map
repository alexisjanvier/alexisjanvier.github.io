{"version":3,"sources":["webpack:///path---avec-ou-sans-redux-3902a947dc47803da002.js","webpack:///./.cache/json/avec-ou-sans-redux.json"],"names":["webpackJsonp","373","module","exports","data","markdownRemark","html","frontmatter","title","date","tags","description","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA;AAAo0pFC,aAAuhBC,MAAA,uBAAAC,KAAA,aAAAC,MAAA,+CAAAC,YAAA,kGAAyNC,aAAgBC,KAAA","file":"path---avec-ou-sans-redux-3902a947dc47803da002.js","sourcesContent":["webpackJsonp([261154270709379],{\n\n/***/ 373:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>Chez Marmelab on aime beaucoup <a href=\\\"https://redux.js.org/\\\">Redux</a>. Il faut dire que son arrivée a été un vrai moment d'évolution dans notre manière de penser nos applications : store immutable, sensibilisation à la programmation fonctionnelle, gestion asynchrone des call API avec les générateurs de Redux-Saga, ... À tel point que l'on a eu tendance à l'intégrer de facto dans notre stack en démarrage de projet.<br>\\nMais est-ce vraiment une bonne idée ? Pas certain ...</p>\\n<h2>Un exemple</h2>\\n<p>Prenons une application très simple de gestion de meetup. L'objectif est de pouvoir visualiser :</p>\\n<ul>\\n<li>une liste des propositions de talks,</li>\\n<li>une liste de souhaits de talks,</li>\\n<li>une liste des membres du meetup.</li>\\n</ul>\\n<p>Les données sont obtenues via une <a href=\\\"https://expressserver-xsdtbkkhsf.now.sh\\\">API REST</a> et l'application tout comme l'API sont protégées par un login/password.</p>\\n<p>L'application est bootstrappée avec <a href=\\\"https://github.com/facebook/create-react-app\\\">Create React App</a> auquel on rajoute :</p>\\n<ul>\\n<li><a href=\\\"https://redux.js.org/\\\">Redux</a></li>\\n<li><a href=\\\"https://redux-saga.js.org/\\\">Redux-Saga</a></li>\\n<li><a href=\\\"https://github.com/reactjs/react-router-redux\\\">react-router-redux</a></li>\\n</ul>\\n<p>Voilà à quoi ressemble le projet :</p>\\n<iframe src=\\\"https://codesandbox.io/embed/m5n2xjl6pj?autoresize=1&module=%2Fsrc%2FApp.js&moduleview=1&view=editor\\\" style=\\\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\\\" sandbox=\\\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\\\"></iframe>\\n<p>Tout commence donc par une application <code class=\\\"language-text\\\">App.js</code> qui se charge de monter le store Redux <code class=\\\"language-text\\\">&lt;Provider store={store}&gt;</code> et les routes <code class=\\\"language-text\\\">&lt;ConnectedRouter history={history}&gt;</code> :</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// in App.js</span>\\n<span class=\\\"token operator\\\">...</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">App</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> store<span class=\\\"token punctuation\\\">,</span> history <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n   <span class=\\\"token operator\\\">&lt;</span>Provider store<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>store<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n       <span class=\\\"token operator\\\">&lt;</span>ConnectedRouter history<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>history<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n           <span class=\\\"token operator\\\">&lt;</span>Container<span class=\\\"token operator\\\">></span>\\n               <span class=\\\"token operator\\\">&lt;</span>Header <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n               <span class=\\\"token operator\\\">&lt;</span>Switch<span class=\\\"token operator\\\">></span>\\n                   <span class=\\\"token operator\\\">&lt;</span>Route exact path<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"/\\\"</span> component<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>Home<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n                   <span class=\\\"token operator\\\">&lt;</span>Route path<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"/talks\\\"</span> component<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>Talks<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n                   <span class=\\\"token operator\\\">&lt;</span>Route path<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"/wishes\\\"</span> component<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>Wishes<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n                   <span class=\\\"token operator\\\">&lt;</span>Route path<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"/members\\\"</span> component<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>Members<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n                   <span class=\\\"token operator\\\">&lt;</span>Route path<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"/login\\\"</span> component<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>Authentication<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n                   <span class=\\\"token operator\\\">&lt;</span>Route component<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>NoMatch<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n               <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Switch<span class=\\\"token operator\\\">></span>\\n           <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Container<span class=\\\"token operator\\\">></span>\\n       <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>ConnectedRouter<span class=\\\"token operator\\\">></span>\\n   <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Provider<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Tous les composants <em>métier</em> (ceux rendus par une route, comme <code class=\\\"language-text\\\">&lt;Route path=&quot;/talks&quot; component={Talks} /&gt;</code> sont organisés selon la structure bien connue des utilisateurs de Redux :</p>\\n<ul>\\n<li>les actions,</li>\\n<li>les reducers,</li>\\n<li>les sagas.</li>\\n</ul>\\n<p>Par exemple pour la page des talks :</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">├── talks\\n│   ├── actions.js\\n│   ├── reducer.js\\n│   ├── sagas.js\\n│   └── Talks.js</code></pre>\\n      </div>\\n<p>Le composant de page est très simple :</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// in talks/Talks.js</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">Talks</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> isLoading<span class=\\\"token punctuation\\\">,</span> talks <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n   <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n       <span class=\\\"token operator\\\">&lt;</span>h1<span class=\\\"token operator\\\">></span>Talks<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h1<span class=\\\"token operator\\\">></span>\\n       <span class=\\\"token punctuation\\\">{</span>isLoading <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token operator\\\">&lt;</span>Spinner <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">}</span>\\n       <span class=\\\"token punctuation\\\">{</span>talks <span class=\\\"token operator\\\">&amp;&amp;</span> talks<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>talk <span class=\\\"token operator\\\">=></span> <span class=\\\"token operator\\\">&lt;</span>h2 key<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>talk<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">{</span>talk<span class=\\\"token punctuation\\\">.</span>title<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h2<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n   <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">mapStateToProps</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>  talks <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n   isLoading<span class=\\\"token punctuation\\\">:</span> talks<span class=\\\"token punctuation\\\">.</span>isLoading<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n   talks<span class=\\\"token punctuation\\\">:</span> talks<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> mapDispatchToProps <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token function\\\">connect</span><span class=\\\"token punctuation\\\">(</span>mapStateToProps<span class=\\\"token punctuation\\\">,</span> mapDispatchToProps<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>Talks<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Les données <code class=\\\"language-text\\\">talks</code> ne sont pas appelées au <code class=\\\"language-text\\\">ComponentWillMount</code> comme on pourrait s'y attendre mais grâce à une saga à l'écoute du routeur :</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// in talks/sagas.js</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> put<span class=\\\"token punctuation\\\">,</span> select<span class=\\\"token punctuation\\\">,</span> takeLatest <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'redux-saga/effects'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token constant\\\">LOCATION_CHANGE</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-router-redux'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> loadTalks <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./actions'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> hasData <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./reducer'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token operator\\\">*</span> <span class=\\\"token function\\\">handleTalksLoading</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">yield</span> <span class=\\\"token function\\\">select</span><span class=\\\"token punctuation\\\">(</span>hasData<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token function\\\">put</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">loadTalks</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">sagas</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token function\\\">takeLatest</span><span class=\\\"token punctuation\\\">(</span>\\n        action <span class=\\\"token operator\\\">=></span>\\n            action<span class=\\\"token punctuation\\\">.</span>type <span class=\\\"token operator\\\">===</span> <span class=\\\"token constant\\\">LOCATION_CHANGE</span> <span class=\\\"token operator\\\">&amp;&amp;</span>\\n            action<span class=\\\"token punctuation\\\">.</span>payload<span class=\\\"token punctuation\\\">.</span>pathname <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'/talks'</span><span class=\\\"token punctuation\\\">,</span>\\n        handleTalksLoading<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Au changement de route <code class=\\\"language-text\\\">action.type === LOCATION_CHANGE</code> - si la nouvelle route correspond à la section des talks <code class=\\\"language-text\\\">action.payload.pathname === &#39;/talks&#39;</code> et que les données ne sont pas déja présentes <code class=\\\"language-text\\\">if (yield select(hasData))</code> - on lance une action avec la fonction <code class=\\\"language-text\\\">loadTalks</code> :</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// in talks/actions.js</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> createAction <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'redux-actions'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">LOAD_TALKS</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'LOAD_TALKS'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> loadTalks <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">createAction</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token constant\\\">LOAD_TALKS</span><span class=\\\"token punctuation\\\">,</span>\\n    payload <span class=\\\"token operator\\\">=></span> payload<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n        request<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n            url<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'/talks'</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Cette action contenant l'url permettant d'obtenir les données sur les talks dans ses <strong>meta</strong> va être interceptée par une <strong>saga</strong> générique de fetch <code class=\\\"language-text\\\">action =&gt; !!action.meta &amp;&amp; action.meta.request</code>:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// in /services/fetch/fetchSagas.js</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> call<span class=\\\"token punctuation\\\">,</span> put<span class=\\\"token punctuation\\\">,</span> takeEvery<span class=\\\"token punctuation\\\">,</span> select <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'redux-saga/effects'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> createAction <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'redux-actions'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> appFetch <span class=\\\"token keyword\\\">as</span> fetch <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./fetch'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">fetchError</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>type<span class=\\\"token punctuation\\\">,</span> error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n    <span class=\\\"token function\\\">createAction</span><span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>type<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">_ERROR`</span></span><span class=\\\"token punctuation\\\">,</span>\\n        payload <span class=\\\"token operator\\\">=></span> payload<span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n            disconnect<span class=\\\"token punctuation\\\">:</span> error<span class=\\\"token punctuation\\\">.</span>code <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">401</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">fetchSuccess</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>type<span class=\\\"token punctuation\\\">,</span> response<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n    <span class=\\\"token function\\\">createAction</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>type<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">_SUCCESS`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>response<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token operator\\\">*</span> <span class=\\\"token function\\\">executeFetchSaga</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> type<span class=\\\"token punctuation\\\">,</span> meta<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> request <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> token <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token function\\\">select</span><span class=\\\"token punctuation\\\">(</span>state <span class=\\\"token operator\\\">=></span> state<span class=\\\"token punctuation\\\">.</span>authentication<span class=\\\"token punctuation\\\">.</span>token<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> error<span class=\\\"token punctuation\\\">,</span> response <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>fetch<span class=\\\"token punctuation\\\">,</span> request<span class=\\\"token punctuation\\\">,</span> token<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token function\\\">put</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">fetchError</span><span class=\\\"token punctuation\\\">(</span>type<span class=\\\"token punctuation\\\">,</span> error<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token function\\\">put</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">fetchSuccess</span><span class=\\\"token punctuation\\\">(</span>type<span class=\\\"token punctuation\\\">,</span> response<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">sagas</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token function\\\">takeEvery</span><span class=\\\"token punctuation\\\">(</span>\\n        action <span class=\\\"token operator\\\">=></span> <span class=\\\"token operator\\\">!</span><span class=\\\"token operator\\\">!</span>action<span class=\\\"token punctuation\\\">.</span>meta <span class=\\\"token operator\\\">&amp;&amp;</span> action<span class=\\\"token punctuation\\\">.</span>meta<span class=\\\"token punctuation\\\">.</span>request<span class=\\\"token punctuation\\\">,</span>\\n        executeFetchSaga<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Une fois le fetch réussi <code class=\\\"language-text\\\">fetchSuccess</code>, on lance une dernière action indiquant la réussite de la récupération des données <code class=\\\"language-text\\\">createAction(&#39;${type}_SUCCESS&#39;)(response)</code>, action utilisée au niveau du <strong>reducer</strong> des talks :</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// in talks/reducers.js</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> reducer <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">handleActions</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token punctuation\\\">[</span><span class=\\\"token constant\\\">LOAD_TALKS</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> state <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token operator\\\">...</span>state<span class=\\\"token punctuation\\\">,</span>\\n            loading<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">[</span><span class=\\\"token constant\\\">LOAD_TALKS_SUCCESS</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> payload <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token operator\\\">...</span>state<span class=\\\"token punctuation\\\">,</span>\\n            loading<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span>\\n            data<span class=\\\"token punctuation\\\">:</span> payload<span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    defaultState<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Et tout cela marche très bien. C'est plutôt malin, et pourquoi pas un peu élégant. L'utilisation des <strong>meta</strong> des actions permet de partager des comportements génériques au sein de l'application (le fetch, mais aussi la gestion des erreurs, la deconnexion).</p>\\n<blockquote>\\n<p>Vous pouvez trouver le code <em>complet</em> sur <a href=\\\"https://github.com/alexisjanvier/javascript-playground/releases/tag/cra-with-redux\\\">GitHub</a></p>\\n</blockquote>\\n<h3>Mais il y a un mais</h3>\\n<p><strong>C'est malin, mais c'est surtout très complexe !</strong> Pas facile de s'y retrouver en arrivant sur l'application tant un certain nombre de comportements relèvent de la <em>magie</em>. Car si on récapitule, on obtient les données des talks via une saga branchée sur le routeur qui envoi une action de type fetch interceptée par une autre saga générique qui en cas de succès émet une autre action, action interceptée par le reduceur de la page ayant émis la toute première action de la chaine ...<br>\\nCertains dirons peut-être qu'il s'agit ici d'une utilisation <em>hors des cloues de Redux</em>, mais c'est surtout le résultat de plusieurs projets réalisés sur cette stack, avec l'expérience d'écritures répetitives d'actions et de reducers.</p>\\n<p>Se rajoute à  cette complexité une <em>plomberie</em> non négligeable, c'est à dire beaucoup de fichiers répétés pour chaque feature (les actions, les reducers et autres sagas).</p>\\n<p>Analysons l'application d'exemple avec ses trois pages, sa home et sa page de login :</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">❯ cloc services/cra_webapp/src\\n     32 text files.\\n     32 unique files.\\n      0 files ignored.\\n\\ngithub.com/AlDanial/cloc <span class=\\\"token function\\\">v</span> 1.74  T<span class=\\\"token operator\\\">=</span>0.06 s <span class=\\\"token punctuation\\\">(</span>581.6 files/s, 17722.1 lines/s<span class=\\\"token punctuation\\\">)</span>\\n-------------------------------------------------------------------------------\\nLanguage                     files          blank        comment           code\\n-------------------------------------------------------------------------------\\nJavaScript                      31            150              1            819\\nCSS                              1              0              0              5\\n-------------------------------------------------------------------------------\\nSUM:                            32            150              1            824\\n-------------------------------------------------------------------------------</code></pre>\\n      </div>\\n<p><strong>31 fichiers, 819 lignes de code</strong>, c'est déja beaucoup pour une application très simple. Le code pourrait sûrement être simplifié un peu mais au risque de le rendre moins générique.</p>\\n<p><strong>C'est certainement le moment de se poser la question de savoir si Redux est ici bien nécessaire ?</strong></p>\\n<blockquote>\\n<p>Redux is a predictable state container for JavaScript apps.</p>\\n</blockquote>\\n<p>Différentes parties de l'application doivent-elles modifier les mêmes données, nécessitant de maintenir un état prédictible de nos données ? Non, on doit juste afficher des données provenant de l'API.<br>\\nA-t-on des composants enfouis dans le DOM dont l'interaction induit une modification des données ? Non plus.</p>\\n<p>On doit donc sûrement pouvoir se passer de Redux.</p>\\n<h2>Obtenir les données sans Redux</h2>\\n<p>Ou plutôt sans <strong>Redux-Saga</strong> chargé de rendre disponibles les données nécessaires à l'affichage de nos pages au niveau du <strong>store</strong> de Redux depuis l'API. On pourrait implémenter toute la logique de fetch au niveau de chaque page. Mais ce serait dupliquer une mécanique très répétitive. Il faut donc trouver une manière générique de réaliser ce fetch sans introduire trop de complexité.<br>\\nEt la pattern de <a href=\\\"https://cdb.reacttraining.com/use-a-render-prop-50de598f11ce\\\"><strong>render prop</strong></a> est particulièrement adaptée à cela !</p>\\n<p>Nous allons créer un composant <code class=\\\"language-text\\\">DataProvider</code> :</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// in DataProvider.js</span>\\n<span class=\\\"token keyword\\\">import</span> React<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> Component<span class=\\\"token punctuation\\\">,</span> Fragment <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Redirect <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-router'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> appFetch <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./services/fetch'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">DataProvider</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Component</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">static</span> propTypes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n        render<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>func<span class=\\\"token punctuation\\\">.</span>isRequired<span class=\\\"token punctuation\\\">,</span>\\n        url<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>string<span class=\\\"token punctuation\\\">.</span>isRequired<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n        data<span class=\\\"token punctuation\\\">:</span> undefined<span class=\\\"token punctuation\\\">,</span>\\n        error<span class=\\\"token punctuation\\\">:</span> undefined<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    fetchData <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">async</span> props <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">const</span> token <span class=\\\"token operator\\\">=</span> window<span class=\\\"token punctuation\\\">.</span>sessionStorage<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getItem</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'token'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">const</span> data <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">appFetch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> url <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> token<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n                data<span class=\\\"token punctuation\\\">:</span> data<span class=\\\"token punctuation\\\">.</span>response<span class=\\\"token punctuation\\\">,</span>\\n                error<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">error</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n                error<span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function\\\">componentDidMount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">fetchData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> data<span class=\\\"token punctuation\\\">,</span> error <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> location <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> error<span class=\\\"token punctuation\\\">.</span>code <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">401</span> <span class=\\\"token operator\\\">&amp;&amp;</span> error<span class=\\\"token punctuation\\\">.</span>code <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">403</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token punctuation\\\">(</span>\\n                <span class=\\\"token operator\\\">&lt;</span>Redirect to<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"/login\\\"</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>\\n                <span class=\\\"token operator\\\">&lt;</span>p<span class=\\\"token operator\\\">></span>Erreur lors du chargement des données<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>p<span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n            <span class=\\\"token operator\\\">&lt;</span>Fragment<span class=\\\"token operator\\\">></span>\\n                <span class=\\\"token punctuation\\\">{</span>data <span class=\\\"token operator\\\">?</span> <span class=\\\"token punctuation\\\">(</span>\\n                    <span class=\\\"token operator\\\">&lt;</span>p<span class=\\\"token operator\\\">></span>Aucune donnée disponible<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>p<span class=\\\"token operator\\\">></span>\\n                <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>\\n                    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n                        data<span class=\\\"token punctuation\\\">,</span>\\n                    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Fragment<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Ce composant réalise un fetch sur l'url qui lui est passé en prop au <code class=\\\"language-text\\\">componentDidMount</code>. Il va se charger de la gestion des erreurs et de l'absence de donnée. Et si il obtient des données, il <em>passe le main</em> à la fonction qui lui est donnée en prop <code class=\\\"language-text\\\">render</code> pour réaliser l'affichage <code class=\\\"language-text\\\">this.props.render({ data })</code>.</p>\\n<p>Implémentons ce composant sur notre page de talks :</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// in talks/Talks.js</span>\\n<span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> PropTypes <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'prop-types'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> DataProvider <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'../DataProvider'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">TalksView</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> talks <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>h1<span class=\\\"token operator\\\">></span>Talks<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h1<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">{</span>talks <span class=\\\"token operator\\\">&amp;&amp;</span> talks<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>talk <span class=\\\"token operator\\\">=></span> <span class=\\\"token operator\\\">&lt;</span>h2 key<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>talk<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">{</span>talk<span class=\\\"token punctuation\\\">.</span>title<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h2<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nTalksView<span class=\\\"token punctuation\\\">.</span>propTypes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    talks<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>array<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">Talks</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>DataProvider\\n        url<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"/talks\\\"</span>\\n        render<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> data <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token operator\\\">&lt;</span>TalksView talks<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>data<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>On a deux composants :</p>\\n<ul>\\n<li>le composant <code class=\\\"language-text\\\">TalksView</code> qui ne se charge que de l'affichage de données, peu lui importe d'ou elles proviennent,</li>\\n<li>le composant <code class=\\\"language-text\\\">Talks</code> utilisant le <code class=\\\"language-text\\\">DataProvider</code> pour obtenir les données et <code class=\\\"language-text\\\">TalksView</code> pour l'     afficher <code class=\\\"language-text\\\">render={({ data }) =&gt; &lt;TalksView talks={data} /&gt;}</code>.</li>\\n</ul>\\n<p>C'est simple, efficace et lisible !</p>\\n<blockquote>\\n<p>Il existe une excellente librairie reprenant ce principe de data provider : <a href=\\\"https://github.com/jamesplease/react-request\\\">react-request: Declarative HTTP requests for React</a></p>\\n</blockquote>\\n<p>Sur cette base, nous pouvons supprimer Redux de notre application.</p>\\n<iframe src=\\\"https://codesandbox.io/embed/o77qv75rmq?module=%2Fsrc%2FApp.js&view=editor\\\" style=\\\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\\\" sandbox=\\\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\\\"></iframe>\\n<p>Relançons l'analyse de notre projet :</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">❯ cloc services/cra_webapp/src\\n      16 text files.\\n      16 unique files.\\n       0 files ignored.\\n\\ngithub.com/AlDanial/cloc <span class=\\\"token function\\\">v</span> 1.74  T<span class=\\\"token operator\\\">=</span>0.04 s <span class=\\\"token punctuation\\\">(</span>418.9 files/s, 13404.6 lines/s<span class=\\\"token punctuation\\\">)</span>\\n-------------------------------------------------------------------------------\\nLanguage                     files          blank        comment           code\\n-------------------------------------------------------------------------------\\nJavaScript                      15             64              1            442\\nCSS                              1              0              0              5\\n-------------------------------------------------------------------------------\\nSUM:                            16             64              1            447\\n-------------------------------------------------------------------------------</code></pre>\\n      </div>\\n<p>Nous sommes donc passés de 819 lignes de code à <strong>442 lignes</strong>, presque moitié moins. Pas mal !</p>\\n<h2>Se passer du Store de Redux</h2>\\n<p>En l'état, on obtient les données pour chaque page grâce au DataProvider. Mais notre application requière une authentification permettant d'obtenir les informations sur l'utilisateur via un <strong>json-web-token</strong>.<br>\\nComment va-t-on pouvoir transmettre ces informations sur l'utilisateur aux différents composants sans le store Redux ?<br>\\nEt bien en utilisant le <strong>state</strong> de notre composant de plus haut niveau, le <code class=\\\"language-text\\\">App.js</code> et en transmettant le <code class=\\\"language-text\\\">user</code> comme une <strong>prop</strong> aux composants enfants qui en ont besoin (<code class=\\\"language-text\\\">PrivateRoute.js</code>, <code class=\\\"language-text\\\">Header.js</code>).</p>\\n<p>Bref, en faisant du React !</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// in App.js</span>\\n<span class=\\\"token keyword\\\">import</span> React<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> Component <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> BrowserRouter <span class=\\\"token keyword\\\">as</span> Router<span class=\\\"token punctuation\\\">,</span> Route<span class=\\\"token punctuation\\\">,</span> Switch <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-router-dom'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Authentication <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./authentication/Authentication'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Header <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./components/Header'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> PrivateRoute <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./PrivateRoute'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Talks <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./talks/Talks'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">App</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Component</span> <span class=\\\"token punctuation\\\">{</span>\\n    state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n        user<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function-variable function\\\">decodeToken</span> <span class=\\\"token operator\\\">=</span> token <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">const</span> user <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">decode</span><span class=\\\"token punctuation\\\">(</span>token<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> user <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function\\\">componentWillMount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">const</span> token <span class=\\\"token operator\\\">=</span> window<span class=\\\"token punctuation\\\">.</span>sessionStorage<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getItem</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'token'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>token<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">decodeToken</span><span class=\\\"token punctuation\\\">(</span>token<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token function-variable function\\\">handleNewToken</span> <span class=\\\"token operator\\\">=</span> token <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        window<span class=\\\"token punctuation\\\">.</span>sessionStorage<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setItem</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'token'</span><span class=\\\"token punctuation\\\">,</span> token<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">decodeToken</span><span class=\\\"token punctuation\\\">(</span>token<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function-variable function\\\">handleLogout</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        window<span class=\\\"token punctuation\\\">.</span>sessionStorage<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">removeItem</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'token'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> user<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> user <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n            <span class=\\\"token operator\\\">&lt;</span>Router<span class=\\\"token operator\\\">></span>\\n                <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n                    <span class=\\\"token operator\\\">&lt;</span>Header user<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>user<span class=\\\"token punctuation\\\">}</span> onLogout<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleLogout<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n                    <span class=\\\"token operator\\\">&lt;</span>Switch<span class=\\\"token operator\\\">></span>\\n                        <span class=\\\"token operator\\\">&lt;</span>PrivateRoute\\n                            path<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"/talks\\\"</span>\\n                            render<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n                                <span class=\\\"token operator\\\">&lt;</span>Talks <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n                            <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n                            user<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>user<span class=\\\"token punctuation\\\">}</span>\\n                        <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n                        <span class=\\\"token operator\\\">&lt;</span>Route\\n                            path<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"/login\\\"</span>\\n                            render<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> location <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n                                <span class=\\\"token operator\\\">&lt;</span>Authentication\\n                                    location<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>location<span class=\\\"token punctuation\\\">}</span>\\n                                    onNewToken<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleNewToken<span class=\\\"token punctuation\\\">}</span>\\n                                <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n                            <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n                        <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n                    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Switch<span class=\\\"token operator\\\">></span>\\n                <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Router<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<blockquote>\\n<p>C'est vrai, stocker le <code class=\\\"language-text\\\">token</code> dans le <code class=\\\"language-text\\\">window.sessionStorage</code> est une <a href=\\\"https://www.rdegges.com/2018/please-stop-using-local-storage/\\\"><strong>mauvaise pratique</strong></a>. Mais cela permet pour notre exemple de rapidement mettre en place l'authentification. Cela n'a rien à voir avec la suppression de Redux.</p>\\n</blockquote>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// in PrivateRoute.js</span>\\n<span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> PropTypes <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'prop-types'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Redirect<span class=\\\"token punctuation\\\">,</span> Route <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-router'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * This Route will redirect the user to the login page if needed.\\n */</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">PrivateRoute</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> user<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>rest <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n    user <span class=\\\"token operator\\\">?</span> <span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token operator\\\">&lt;</span>Route <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>rest<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token operator\\\">&lt;</span>Redirect\\n            to<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span>\\n                pathname<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'/login'</span><span class=\\\"token punctuation\\\">,</span>\\n                state<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">:</span> rest<span class=\\\"token punctuation\\\">.</span>location <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nPrivateRoute<span class=\\\"token punctuation\\\">.</span>propTypes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    user<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>object<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// in components/Header.js</span>\\n<span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> PropTypes <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'prop-types'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Navigation <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./Navigation'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">Header</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> user<span class=\\\"token punctuation\\\">,</span> onLogout <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>header<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>h1<span class=\\\"token operator\\\">></span>JavaScript Playground<span class=\\\"token punctuation\\\">:</span> meetups<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h1<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">{</span>user <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token operator\\\">&lt;</span>Navigation onLogout<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>onLogout<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>header<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nHeader<span class=\\\"token punctuation\\\">.</span>propTypes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    user<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>object<span class=\\\"token punctuation\\\">,</span>\\n    onLogout<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>func<span class=\\\"token punctuation\\\">.</span>isRequired<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>L'application étant très simple, le passage du <code class=\\\"language-text\\\">user</code> en <strong>prop</strong> aux enfants n'est pas problématique. Le composant <code class=\\\"language-text\\\">Header</code> fait sans doute un peu le <em>passe-plat</em> mais ce n'est pas très pénalisant.</p>\\n<p>Qu'en est-il pour une application plus conséquente ? Cela peut devenir très pénible. C'est d'ailleur un des cas ou il devient légitime de se poser la question de l'utilisation de Redux !</p>\\n<p>Mais avant cela, il existe maintenant une solution très simple permettant de transmettre des informations depuis un composant vers un autre composant plus profond du DOM : le <a href=\\\"https://reactjs.org/docs/context.html\\\"><strong>Context</strong></a> de React.</p>\\n<h3>React Context</h3>\\n<p>La méthode <code class=\\\"language-text\\\">React.createContext</code> va nous permettre de générer un :</p>\\n<ul>\\n<li><code class=\\\"language-text\\\">Provider</code> chargé de <em>distribuer</em> la donnée,</li>\\n<li><code class=\\\"language-text\\\">Consumer</code> qui sera capable de lire la donnée du provider.</li>\\n</ul>\\n<blockquote>\\n<p>On peut noter au passage que le <code class=\\\"language-text\\\">Consumer</code> utilise la pattern de <strong>render prop</strong>.</p>\\n</blockquote>\\n<p>Reprenons nos trois composants précédents.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// in App.js</span>\\n<span class=\\\"token keyword\\\">import</span> React<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> Component <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> BrowserRouter <span class=\\\"token keyword\\\">as</span> Router<span class=\\\"token punctuation\\\">,</span> Route<span class=\\\"token punctuation\\\">,</span> Switch <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-router-dom'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> styled <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'styled-components'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> decode <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'jsonwebtoken'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token operator\\\">...</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> UserContext <span class=\\\"token operator\\\">=</span> React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createContext</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    user<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n    onLogout<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">App</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Component</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token operator\\\">...</span>\\n\\n    <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> user <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n            <span class=\\\"token operator\\\">&lt;</span>UserContext<span class=\\\"token punctuation\\\">.</span>Provider\\n                value<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span>\\n                    user<span class=\\\"token punctuation\\\">,</span>\\n                    onLogout<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleLogout<span class=\\\"token punctuation\\\">,</span>\\n                <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token operator\\\">></span>\\n                <span class=\\\"token operator\\\">&lt;</span>Router<span class=\\\"token operator\\\">></span>\\n                    <span class=\\\"token operator\\\">&lt;</span>Container<span class=\\\"token operator\\\">></span>\\n                        <span class=\\\"token operator\\\">&lt;</span>Header <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n                        <span class=\\\"token operator\\\">&lt;</span>Switch<span class=\\\"token operator\\\">></span>\\n                            <span class=\\\"token operator\\\">&lt;</span>PrivateRoute\\n                                exact\\n                                path<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"/\\\"</span>\\n                                render<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> location <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n                                    <span class=\\\"token operator\\\">&lt;</span>Home location<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>location<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n                                <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n                            <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n                        <span class=\\\"token operator\\\">...</span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// in PrivateRoute.js</span>\\n<span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> PropTypes <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'prop-types'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Redirect<span class=\\\"token punctuation\\\">,</span> Route <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-router'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> UserContext <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./App'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">PrivateRouteWithoutContext</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> user<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>rest <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n    user <span class=\\\"token operator\\\">?</span> <span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token operator\\\">&lt;</span>Route <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>rest<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token operator\\\">&lt;</span>Redirect\\n            to<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span>\\n                pathname<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'/login'</span><span class=\\\"token punctuation\\\">,</span>\\n                state<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">:</span> rest<span class=\\\"token punctuation\\\">.</span>location <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nPrivateRouteWithoutContext<span class=\\\"token punctuation\\\">.</span>propTypes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    user<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>object<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">PrivateRoute</span> <span class=\\\"token operator\\\">=</span> props <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token operator\\\">&lt;</span>UserContext<span class=\\\"token punctuation\\\">.</span>Consumer<span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> user <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n                <span class=\\\"token operator\\\">&lt;</span>PrivateRouteWithoutContext user<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>user<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>props<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>UserContext<span class=\\\"token punctuation\\\">.</span>Consumer<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// in components/Header.js</span>\\n<span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> PropTypes <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'prop-types'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> UserContext <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'../App'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Navigation <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./Navigation'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">HeaderWithoutContext</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> user<span class=\\\"token punctuation\\\">,</span> onLogout <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>header<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>h1<span class=\\\"token operator\\\">></span>JavaScript Playground<span class=\\\"token punctuation\\\">:</span> meetups<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h1<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">{</span>user <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token operator\\\">&lt;</span>Navigation onLogout<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>onLogout<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>header<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nHeaderWithoutContext<span class=\\\"token punctuation\\\">.</span>propTypes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    user<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>object<span class=\\\"token punctuation\\\">,</span>\\n    onLogout<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>func<span class=\\\"token punctuation\\\">.</span>isRequired<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">Header</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token operator\\\">&lt;</span>UserContext<span class=\\\"token punctuation\\\">.</span>Consumer<span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> user<span class=\\\"token punctuation\\\">,</span> onLogout <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n                <span class=\\\"token operator\\\">&lt;</span>HeaderWithoutContext user<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>user<span class=\\\"token punctuation\\\">}</span> onLogout<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>onLogout<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>UserContext<span class=\\\"token punctuation\\\">.</span>Consumer<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Le <strong>Context</strong> de React est un moyen simple de <em>télétransporter</em> directement de la donnée d'un composant <em>N</em> de l'application à n'importe quel composant enfant <em>N-x</em>.</p>\\n<h2>Conclusion</h2>\\n<p>L'intégration de <strong>Redux</strong> dans son <a href=\\\"https://blog.kentcdodds.com/concerning-toolkits-4db57296e1c3\\\">toolkit</a> de démarage de projet n'est sans doute pas une excelente idée. C'est un outil puissant mais il ne correspond pas à tous les cas d'utilisation , il solutionne plutôt une complexité de projet particulière.  </p>\\n<p>Ce n'est d'ailleurs pas une nouveauté 😄</p>\\n<blockquote class=\\\"twitter-tweet\\\" data-lang=\\\"fr\\\"><p lang=\\\"en\\\" dir=\\\"ltr\\\">Flux libraries are like glasses: you’ll know when you need them.</p>&mdash; Dan Abramov (@dan_abramov) <a href=\\\"https://twitter.com/dan_abramov/status/704304462739939328?ref_src=twsrc%5Etfw\\\">29 février 2016</a></blockquote>\\n<script async src=\\\"https://platform.twitter.com/widgets.js\\\" charset=\\\"utf-8\\\"></script>\\n<p>Mais il existe maintenant de nombreux outils et patterns à ajouter à ce toolkit permettant de répondre simplement aux problématiques de factorisation de comportements (la pattern <strong>render prop</strong>) ou de partage de state (le <strong>Context</strong> React).</p>\",\"frontmatter\":{\"title\":\"Avec ou sans Redux ?\",\"date\":\"2018-06-04\",\"tags\":[\"react\",\"redux\",\"render prop\",\"react context\"],\"description\":\"Redux est un outil fantastique, mais convient-t-il à toutes les situations ? Sans doute pas.\"}}},\"pathContext\":{\"slug\":\"avec-ou-sans-redux\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---avec-ou-sans-redux-3902a947dc47803da002.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>Chez Marmelab on aime beaucoup <a href=\\\"https://redux.js.org/\\\">Redux</a>. Il faut dire que son arrivée a été un vrai moment d'évolution dans notre manière de penser nos applications : store immutable, sensibilisation à la programmation fonctionnelle, gestion asynchrone des call API avec les générateurs de Redux-Saga, ... À tel point que l'on a eu tendance à l'intégrer de facto dans notre stack en démarrage de projet.<br>\\nMais est-ce vraiment une bonne idée ? Pas certain ...</p>\\n<h2>Un exemple</h2>\\n<p>Prenons une application très simple de gestion de meetup. L'objectif est de pouvoir visualiser :</p>\\n<ul>\\n<li>une liste des propositions de talks,</li>\\n<li>une liste de souhaits de talks,</li>\\n<li>une liste des membres du meetup.</li>\\n</ul>\\n<p>Les données sont obtenues via une <a href=\\\"https://expressserver-xsdtbkkhsf.now.sh\\\">API REST</a> et l'application tout comme l'API sont protégées par un login/password.</p>\\n<p>L'application est bootstrappée avec <a href=\\\"https://github.com/facebook/create-react-app\\\">Create React App</a> auquel on rajoute :</p>\\n<ul>\\n<li><a href=\\\"https://redux.js.org/\\\">Redux</a></li>\\n<li><a href=\\\"https://redux-saga.js.org/\\\">Redux-Saga</a></li>\\n<li><a href=\\\"https://github.com/reactjs/react-router-redux\\\">react-router-redux</a></li>\\n</ul>\\n<p>Voilà à quoi ressemble le projet :</p>\\n<iframe src=\\\"https://codesandbox.io/embed/m5n2xjl6pj?autoresize=1&module=%2Fsrc%2FApp.js&moduleview=1&view=editor\\\" style=\\\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\\\" sandbox=\\\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\\\"></iframe>\\n<p>Tout commence donc par une application <code class=\\\"language-text\\\">App.js</code> qui se charge de monter le store Redux <code class=\\\"language-text\\\">&lt;Provider store={store}&gt;</code> et les routes <code class=\\\"language-text\\\">&lt;ConnectedRouter history={history}&gt;</code> :</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// in App.js</span>\\n<span class=\\\"token operator\\\">...</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">App</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> store<span class=\\\"token punctuation\\\">,</span> history <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n   <span class=\\\"token operator\\\">&lt;</span>Provider store<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>store<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n       <span class=\\\"token operator\\\">&lt;</span>ConnectedRouter history<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>history<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n           <span class=\\\"token operator\\\">&lt;</span>Container<span class=\\\"token operator\\\">></span>\\n               <span class=\\\"token operator\\\">&lt;</span>Header <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n               <span class=\\\"token operator\\\">&lt;</span>Switch<span class=\\\"token operator\\\">></span>\\n                   <span class=\\\"token operator\\\">&lt;</span>Route exact path<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"/\\\"</span> component<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>Home<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n                   <span class=\\\"token operator\\\">&lt;</span>Route path<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"/talks\\\"</span> component<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>Talks<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n                   <span class=\\\"token operator\\\">&lt;</span>Route path<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"/wishes\\\"</span> component<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>Wishes<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n                   <span class=\\\"token operator\\\">&lt;</span>Route path<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"/members\\\"</span> component<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>Members<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n                   <span class=\\\"token operator\\\">&lt;</span>Route path<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"/login\\\"</span> component<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>Authentication<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n                   <span class=\\\"token operator\\\">&lt;</span>Route component<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>NoMatch<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n               <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Switch<span class=\\\"token operator\\\">></span>\\n           <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Container<span class=\\\"token operator\\\">></span>\\n       <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>ConnectedRouter<span class=\\\"token operator\\\">></span>\\n   <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Provider<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Tous les composants <em>métier</em> (ceux rendus par une route, comme <code class=\\\"language-text\\\">&lt;Route path=&quot;/talks&quot; component={Talks} /&gt;</code> sont organisés selon la structure bien connue des utilisateurs de Redux :</p>\\n<ul>\\n<li>les actions,</li>\\n<li>les reducers,</li>\\n<li>les sagas.</li>\\n</ul>\\n<p>Par exemple pour la page des talks :</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">├── talks\\n│   ├── actions.js\\n│   ├── reducer.js\\n│   ├── sagas.js\\n│   └── Talks.js</code></pre>\\n      </div>\\n<p>Le composant de page est très simple :</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// in talks/Talks.js</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">Talks</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> isLoading<span class=\\\"token punctuation\\\">,</span> talks <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n   <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n       <span class=\\\"token operator\\\">&lt;</span>h1<span class=\\\"token operator\\\">></span>Talks<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h1<span class=\\\"token operator\\\">></span>\\n       <span class=\\\"token punctuation\\\">{</span>isLoading <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token operator\\\">&lt;</span>Spinner <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">}</span>\\n       <span class=\\\"token punctuation\\\">{</span>talks <span class=\\\"token operator\\\">&amp;&amp;</span> talks<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>talk <span class=\\\"token operator\\\">=></span> <span class=\\\"token operator\\\">&lt;</span>h2 key<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>talk<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">{</span>talk<span class=\\\"token punctuation\\\">.</span>title<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h2<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n   <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">mapStateToProps</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>  talks <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n   isLoading<span class=\\\"token punctuation\\\">:</span> talks<span class=\\\"token punctuation\\\">.</span>isLoading<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n   talks<span class=\\\"token punctuation\\\">:</span> talks<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> mapDispatchToProps <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token function\\\">connect</span><span class=\\\"token punctuation\\\">(</span>mapStateToProps<span class=\\\"token punctuation\\\">,</span> mapDispatchToProps<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>Talks<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Les données <code class=\\\"language-text\\\">talks</code> ne sont pas appelées au <code class=\\\"language-text\\\">ComponentWillMount</code> comme on pourrait s'y attendre mais grâce à une saga à l'écoute du routeur :</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// in talks/sagas.js</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> put<span class=\\\"token punctuation\\\">,</span> select<span class=\\\"token punctuation\\\">,</span> takeLatest <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'redux-saga/effects'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token constant\\\">LOCATION_CHANGE</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-router-redux'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> loadTalks <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./actions'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> hasData <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./reducer'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token operator\\\">*</span> <span class=\\\"token function\\\">handleTalksLoading</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">yield</span> <span class=\\\"token function\\\">select</span><span class=\\\"token punctuation\\\">(</span>hasData<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token function\\\">put</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">loadTalks</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">sagas</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token function\\\">takeLatest</span><span class=\\\"token punctuation\\\">(</span>\\n        action <span class=\\\"token operator\\\">=></span>\\n            action<span class=\\\"token punctuation\\\">.</span>type <span class=\\\"token operator\\\">===</span> <span class=\\\"token constant\\\">LOCATION_CHANGE</span> <span class=\\\"token operator\\\">&amp;&amp;</span>\\n            action<span class=\\\"token punctuation\\\">.</span>payload<span class=\\\"token punctuation\\\">.</span>pathname <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'/talks'</span><span class=\\\"token punctuation\\\">,</span>\\n        handleTalksLoading<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Au changement de route <code class=\\\"language-text\\\">action.type === LOCATION_CHANGE</code> - si la nouvelle route correspond à la section des talks <code class=\\\"language-text\\\">action.payload.pathname === &#39;/talks&#39;</code> et que les données ne sont pas déja présentes <code class=\\\"language-text\\\">if (yield select(hasData))</code> - on lance une action avec la fonction <code class=\\\"language-text\\\">loadTalks</code> :</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// in talks/actions.js</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> createAction <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'redux-actions'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">LOAD_TALKS</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'LOAD_TALKS'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> loadTalks <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">createAction</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token constant\\\">LOAD_TALKS</span><span class=\\\"token punctuation\\\">,</span>\\n    payload <span class=\\\"token operator\\\">=></span> payload<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n        request<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n            url<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'/talks'</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Cette action contenant l'url permettant d'obtenir les données sur les talks dans ses <strong>meta</strong> va être interceptée par une <strong>saga</strong> générique de fetch <code class=\\\"language-text\\\">action =&gt; !!action.meta &amp;&amp; action.meta.request</code>:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// in /services/fetch/fetchSagas.js</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> call<span class=\\\"token punctuation\\\">,</span> put<span class=\\\"token punctuation\\\">,</span> takeEvery<span class=\\\"token punctuation\\\">,</span> select <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'redux-saga/effects'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> createAction <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'redux-actions'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> appFetch <span class=\\\"token keyword\\\">as</span> fetch <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./fetch'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">fetchError</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>type<span class=\\\"token punctuation\\\">,</span> error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n    <span class=\\\"token function\\\">createAction</span><span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>type<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">_ERROR`</span></span><span class=\\\"token punctuation\\\">,</span>\\n        payload <span class=\\\"token operator\\\">=></span> payload<span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n            disconnect<span class=\\\"token punctuation\\\">:</span> error<span class=\\\"token punctuation\\\">.</span>code <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">401</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">fetchSuccess</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>type<span class=\\\"token punctuation\\\">,</span> response<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n    <span class=\\\"token function\\\">createAction</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>type<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">_SUCCESS`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>response<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token operator\\\">*</span> <span class=\\\"token function\\\">executeFetchSaga</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> type<span class=\\\"token punctuation\\\">,</span> meta<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> request <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> token <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token function\\\">select</span><span class=\\\"token punctuation\\\">(</span>state <span class=\\\"token operator\\\">=></span> state<span class=\\\"token punctuation\\\">.</span>authentication<span class=\\\"token punctuation\\\">.</span>token<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> error<span class=\\\"token punctuation\\\">,</span> response <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>fetch<span class=\\\"token punctuation\\\">,</span> request<span class=\\\"token punctuation\\\">,</span> token<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token function\\\">put</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">fetchError</span><span class=\\\"token punctuation\\\">(</span>type<span class=\\\"token punctuation\\\">,</span> error<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token function\\\">put</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">fetchSuccess</span><span class=\\\"token punctuation\\\">(</span>type<span class=\\\"token punctuation\\\">,</span> response<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">sagas</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token function\\\">takeEvery</span><span class=\\\"token punctuation\\\">(</span>\\n        action <span class=\\\"token operator\\\">=></span> <span class=\\\"token operator\\\">!</span><span class=\\\"token operator\\\">!</span>action<span class=\\\"token punctuation\\\">.</span>meta <span class=\\\"token operator\\\">&amp;&amp;</span> action<span class=\\\"token punctuation\\\">.</span>meta<span class=\\\"token punctuation\\\">.</span>request<span class=\\\"token punctuation\\\">,</span>\\n        executeFetchSaga<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Une fois le fetch réussi <code class=\\\"language-text\\\">fetchSuccess</code>, on lance une dernière action indiquant la réussite de la récupération des données <code class=\\\"language-text\\\">createAction(&#39;${type}_SUCCESS&#39;)(response)</code>, action utilisée au niveau du <strong>reducer</strong> des talks :</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// in talks/reducers.js</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> reducer <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">handleActions</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token punctuation\\\">[</span><span class=\\\"token constant\\\">LOAD_TALKS</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> state <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token operator\\\">...</span>state<span class=\\\"token punctuation\\\">,</span>\\n            loading<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">[</span><span class=\\\"token constant\\\">LOAD_TALKS_SUCCESS</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> payload <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token operator\\\">...</span>state<span class=\\\"token punctuation\\\">,</span>\\n            loading<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span>\\n            data<span class=\\\"token punctuation\\\">:</span> payload<span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    defaultState<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Et tout cela marche très bien. C'est plutôt malin, et pourquoi pas un peu élégant. L'utilisation des <strong>meta</strong> des actions permet de partager des comportements génériques au sein de l'application (le fetch, mais aussi la gestion des erreurs, la deconnexion).</p>\\n<blockquote>\\n<p>Vous pouvez trouver le code <em>complet</em> sur <a href=\\\"https://github.com/alexisjanvier/javascript-playground/releases/tag/cra-with-redux\\\">GitHub</a></p>\\n</blockquote>\\n<h3>Mais il y a un mais</h3>\\n<p><strong>C'est malin, mais c'est surtout très complexe !</strong> Pas facile de s'y retrouver en arrivant sur l'application tant un certain nombre de comportements relèvent de la <em>magie</em>. Car si on récapitule, on obtient les données des talks via une saga branchée sur le routeur qui envoi une action de type fetch interceptée par une autre saga générique qui en cas de succès émet une autre action, action interceptée par le reduceur de la page ayant émis la toute première action de la chaine ...<br>\\nCertains dirons peut-être qu'il s'agit ici d'une utilisation <em>hors des cloues de Redux</em>, mais c'est surtout le résultat de plusieurs projets réalisés sur cette stack, avec l'expérience d'écritures répetitives d'actions et de reducers.</p>\\n<p>Se rajoute à  cette complexité une <em>plomberie</em> non négligeable, c'est à dire beaucoup de fichiers répétés pour chaque feature (les actions, les reducers et autres sagas).</p>\\n<p>Analysons l'application d'exemple avec ses trois pages, sa home et sa page de login :</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">❯ cloc services/cra_webapp/src\\n     32 text files.\\n     32 unique files.\\n      0 files ignored.\\n\\ngithub.com/AlDanial/cloc <span class=\\\"token function\\\">v</span> 1.74  T<span class=\\\"token operator\\\">=</span>0.06 s <span class=\\\"token punctuation\\\">(</span>581.6 files/s, 17722.1 lines/s<span class=\\\"token punctuation\\\">)</span>\\n-------------------------------------------------------------------------------\\nLanguage                     files          blank        comment           code\\n-------------------------------------------------------------------------------\\nJavaScript                      31            150              1            819\\nCSS                              1              0              0              5\\n-------------------------------------------------------------------------------\\nSUM:                            32            150              1            824\\n-------------------------------------------------------------------------------</code></pre>\\n      </div>\\n<p><strong>31 fichiers, 819 lignes de code</strong>, c'est déja beaucoup pour une application très simple. Le code pourrait sûrement être simplifié un peu mais au risque de le rendre moins générique.</p>\\n<p><strong>C'est certainement le moment de se poser la question de savoir si Redux est ici bien nécessaire ?</strong></p>\\n<blockquote>\\n<p>Redux is a predictable state container for JavaScript apps.</p>\\n</blockquote>\\n<p>Différentes parties de l'application doivent-elles modifier les mêmes données, nécessitant de maintenir un état prédictible de nos données ? Non, on doit juste afficher des données provenant de l'API.<br>\\nA-t-on des composants enfouis dans le DOM dont l'interaction induit une modification des données ? Non plus.</p>\\n<p>On doit donc sûrement pouvoir se passer de Redux.</p>\\n<h2>Obtenir les données sans Redux</h2>\\n<p>Ou plutôt sans <strong>Redux-Saga</strong> chargé de rendre disponibles les données nécessaires à l'affichage de nos pages au niveau du <strong>store</strong> de Redux depuis l'API. On pourrait implémenter toute la logique de fetch au niveau de chaque page. Mais ce serait dupliquer une mécanique très répétitive. Il faut donc trouver une manière générique de réaliser ce fetch sans introduire trop de complexité.<br>\\nEt la pattern de <a href=\\\"https://cdb.reacttraining.com/use-a-render-prop-50de598f11ce\\\"><strong>render prop</strong></a> est particulièrement adaptée à cela !</p>\\n<p>Nous allons créer un composant <code class=\\\"language-text\\\">DataProvider</code> :</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// in DataProvider.js</span>\\n<span class=\\\"token keyword\\\">import</span> React<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> Component<span class=\\\"token punctuation\\\">,</span> Fragment <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Redirect <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-router'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> appFetch <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./services/fetch'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">DataProvider</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Component</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">static</span> propTypes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n        render<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>func<span class=\\\"token punctuation\\\">.</span>isRequired<span class=\\\"token punctuation\\\">,</span>\\n        url<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>string<span class=\\\"token punctuation\\\">.</span>isRequired<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n        data<span class=\\\"token punctuation\\\">:</span> undefined<span class=\\\"token punctuation\\\">,</span>\\n        error<span class=\\\"token punctuation\\\">:</span> undefined<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    fetchData <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">async</span> props <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">const</span> token <span class=\\\"token operator\\\">=</span> window<span class=\\\"token punctuation\\\">.</span>sessionStorage<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getItem</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'token'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">const</span> data <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">appFetch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> url <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> token<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n                data<span class=\\\"token punctuation\\\">:</span> data<span class=\\\"token punctuation\\\">.</span>response<span class=\\\"token punctuation\\\">,</span>\\n                error<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">error</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n                error<span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function\\\">componentDidMount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">fetchData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> data<span class=\\\"token punctuation\\\">,</span> error <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> location <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> error<span class=\\\"token punctuation\\\">.</span>code <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">401</span> <span class=\\\"token operator\\\">&amp;&amp;</span> error<span class=\\\"token punctuation\\\">.</span>code <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">403</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token punctuation\\\">(</span>\\n                <span class=\\\"token operator\\\">&lt;</span>Redirect to<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"/login\\\"</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>\\n                <span class=\\\"token operator\\\">&lt;</span>p<span class=\\\"token operator\\\">></span>Erreur lors du chargement des données<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>p<span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n            <span class=\\\"token operator\\\">&lt;</span>Fragment<span class=\\\"token operator\\\">></span>\\n                <span class=\\\"token punctuation\\\">{</span>data <span class=\\\"token operator\\\">?</span> <span class=\\\"token punctuation\\\">(</span>\\n                    <span class=\\\"token operator\\\">&lt;</span>p<span class=\\\"token operator\\\">></span>Aucune donnée disponible<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>p<span class=\\\"token operator\\\">></span>\\n                <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>\\n                    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n                        data<span class=\\\"token punctuation\\\">,</span>\\n                    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Fragment<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Ce composant réalise un fetch sur l'url qui lui est passé en prop au <code class=\\\"language-text\\\">componentDidMount</code>. Il va se charger de la gestion des erreurs et de l'absence de donnée. Et si il obtient des données, il <em>passe le main</em> à la fonction qui lui est donnée en prop <code class=\\\"language-text\\\">render</code> pour réaliser l'affichage <code class=\\\"language-text\\\">this.props.render({ data })</code>.</p>\\n<p>Implémentons ce composant sur notre page de talks :</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// in talks/Talks.js</span>\\n<span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> PropTypes <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'prop-types'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> DataProvider <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'../DataProvider'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">TalksView</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> talks <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>h1<span class=\\\"token operator\\\">></span>Talks<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h1<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">{</span>talks <span class=\\\"token operator\\\">&amp;&amp;</span> talks<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>talk <span class=\\\"token operator\\\">=></span> <span class=\\\"token operator\\\">&lt;</span>h2 key<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>talk<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">{</span>talk<span class=\\\"token punctuation\\\">.</span>title<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h2<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nTalksView<span class=\\\"token punctuation\\\">.</span>propTypes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    talks<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>array<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">Talks</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>DataProvider\\n        url<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"/talks\\\"</span>\\n        render<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> data <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token operator\\\">&lt;</span>TalksView talks<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>data<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>On a deux composants :</p>\\n<ul>\\n<li>le composant <code class=\\\"language-text\\\">TalksView</code> qui ne se charge que de l'affichage de données, peu lui importe d'ou elles proviennent,</li>\\n<li>le composant <code class=\\\"language-text\\\">Talks</code> utilisant le <code class=\\\"language-text\\\">DataProvider</code> pour obtenir les données et <code class=\\\"language-text\\\">TalksView</code> pour l'     afficher <code class=\\\"language-text\\\">render={({ data }) =&gt; &lt;TalksView talks={data} /&gt;}</code>.</li>\\n</ul>\\n<p>C'est simple, efficace et lisible !</p>\\n<blockquote>\\n<p>Il existe une excellente librairie reprenant ce principe de data provider : <a href=\\\"https://github.com/jamesplease/react-request\\\">react-request: Declarative HTTP requests for React</a></p>\\n</blockquote>\\n<p>Sur cette base, nous pouvons supprimer Redux de notre application.</p>\\n<iframe src=\\\"https://codesandbox.io/embed/o77qv75rmq?module=%2Fsrc%2FApp.js&view=editor\\\" style=\\\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\\\" sandbox=\\\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\\\"></iframe>\\n<p>Relançons l'analyse de notre projet :</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">❯ cloc services/cra_webapp/src\\n      16 text files.\\n      16 unique files.\\n       0 files ignored.\\n\\ngithub.com/AlDanial/cloc <span class=\\\"token function\\\">v</span> 1.74  T<span class=\\\"token operator\\\">=</span>0.04 s <span class=\\\"token punctuation\\\">(</span>418.9 files/s, 13404.6 lines/s<span class=\\\"token punctuation\\\">)</span>\\n-------------------------------------------------------------------------------\\nLanguage                     files          blank        comment           code\\n-------------------------------------------------------------------------------\\nJavaScript                      15             64              1            442\\nCSS                              1              0              0              5\\n-------------------------------------------------------------------------------\\nSUM:                            16             64              1            447\\n-------------------------------------------------------------------------------</code></pre>\\n      </div>\\n<p>Nous sommes donc passés de 819 lignes de code à <strong>442 lignes</strong>, presque moitié moins. Pas mal !</p>\\n<h2>Se passer du Store de Redux</h2>\\n<p>En l'état, on obtient les données pour chaque page grâce au DataProvider. Mais notre application requière une authentification permettant d'obtenir les informations sur l'utilisateur via un <strong>json-web-token</strong>.<br>\\nComment va-t-on pouvoir transmettre ces informations sur l'utilisateur aux différents composants sans le store Redux ?<br>\\nEt bien en utilisant le <strong>state</strong> de notre composant de plus haut niveau, le <code class=\\\"language-text\\\">App.js</code> et en transmettant le <code class=\\\"language-text\\\">user</code> comme une <strong>prop</strong> aux composants enfants qui en ont besoin (<code class=\\\"language-text\\\">PrivateRoute.js</code>, <code class=\\\"language-text\\\">Header.js</code>).</p>\\n<p>Bref, en faisant du React !</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// in App.js</span>\\n<span class=\\\"token keyword\\\">import</span> React<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> Component <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> BrowserRouter <span class=\\\"token keyword\\\">as</span> Router<span class=\\\"token punctuation\\\">,</span> Route<span class=\\\"token punctuation\\\">,</span> Switch <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-router-dom'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Authentication <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./authentication/Authentication'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Header <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./components/Header'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> PrivateRoute <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./PrivateRoute'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Talks <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./talks/Talks'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">App</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Component</span> <span class=\\\"token punctuation\\\">{</span>\\n    state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n        user<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function-variable function\\\">decodeToken</span> <span class=\\\"token operator\\\">=</span> token <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">const</span> user <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">decode</span><span class=\\\"token punctuation\\\">(</span>token<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> user <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function\\\">componentWillMount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">const</span> token <span class=\\\"token operator\\\">=</span> window<span class=\\\"token punctuation\\\">.</span>sessionStorage<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getItem</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'token'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>token<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">decodeToken</span><span class=\\\"token punctuation\\\">(</span>token<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token function-variable function\\\">handleNewToken</span> <span class=\\\"token operator\\\">=</span> token <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        window<span class=\\\"token punctuation\\\">.</span>sessionStorage<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setItem</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'token'</span><span class=\\\"token punctuation\\\">,</span> token<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">decodeToken</span><span class=\\\"token punctuation\\\">(</span>token<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function-variable function\\\">handleLogout</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        window<span class=\\\"token punctuation\\\">.</span>sessionStorage<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">removeItem</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'token'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> user<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> user <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n            <span class=\\\"token operator\\\">&lt;</span>Router<span class=\\\"token operator\\\">></span>\\n                <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n                    <span class=\\\"token operator\\\">&lt;</span>Header user<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>user<span class=\\\"token punctuation\\\">}</span> onLogout<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleLogout<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n                    <span class=\\\"token operator\\\">&lt;</span>Switch<span class=\\\"token operator\\\">></span>\\n                        <span class=\\\"token operator\\\">&lt;</span>PrivateRoute\\n                            path<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"/talks\\\"</span>\\n                            render<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n                                <span class=\\\"token operator\\\">&lt;</span>Talks <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n                            <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n                            user<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>user<span class=\\\"token punctuation\\\">}</span>\\n                        <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n                        <span class=\\\"token operator\\\">&lt;</span>Route\\n                            path<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"/login\\\"</span>\\n                            render<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> location <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n                                <span class=\\\"token operator\\\">&lt;</span>Authentication\\n                                    location<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>location<span class=\\\"token punctuation\\\">}</span>\\n                                    onNewToken<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleNewToken<span class=\\\"token punctuation\\\">}</span>\\n                                <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n                            <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n                        <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n                    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Switch<span class=\\\"token operator\\\">></span>\\n                <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Router<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<blockquote>\\n<p>C'est vrai, stocker le <code class=\\\"language-text\\\">token</code> dans le <code class=\\\"language-text\\\">window.sessionStorage</code> est une <a href=\\\"https://www.rdegges.com/2018/please-stop-using-local-storage/\\\"><strong>mauvaise pratique</strong></a>. Mais cela permet pour notre exemple de rapidement mettre en place l'authentification. Cela n'a rien à voir avec la suppression de Redux.</p>\\n</blockquote>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// in PrivateRoute.js</span>\\n<span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> PropTypes <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'prop-types'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Redirect<span class=\\\"token punctuation\\\">,</span> Route <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-router'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * This Route will redirect the user to the login page if needed.\\n */</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">PrivateRoute</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> user<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>rest <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n    user <span class=\\\"token operator\\\">?</span> <span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token operator\\\">&lt;</span>Route <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>rest<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token operator\\\">&lt;</span>Redirect\\n            to<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span>\\n                pathname<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'/login'</span><span class=\\\"token punctuation\\\">,</span>\\n                state<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">:</span> rest<span class=\\\"token punctuation\\\">.</span>location <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nPrivateRoute<span class=\\\"token punctuation\\\">.</span>propTypes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    user<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>object<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// in components/Header.js</span>\\n<span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> PropTypes <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'prop-types'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Navigation <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./Navigation'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">Header</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> user<span class=\\\"token punctuation\\\">,</span> onLogout <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>header<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>h1<span class=\\\"token operator\\\">></span>JavaScript Playground<span class=\\\"token punctuation\\\">:</span> meetups<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h1<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">{</span>user <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token operator\\\">&lt;</span>Navigation onLogout<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>onLogout<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>header<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nHeader<span class=\\\"token punctuation\\\">.</span>propTypes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    user<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>object<span class=\\\"token punctuation\\\">,</span>\\n    onLogout<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>func<span class=\\\"token punctuation\\\">.</span>isRequired<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>L'application étant très simple, le passage du <code class=\\\"language-text\\\">user</code> en <strong>prop</strong> aux enfants n'est pas problématique. Le composant <code class=\\\"language-text\\\">Header</code> fait sans doute un peu le <em>passe-plat</em> mais ce n'est pas très pénalisant.</p>\\n<p>Qu'en est-il pour une application plus conséquente ? Cela peut devenir très pénible. C'est d'ailleur un des cas ou il devient légitime de se poser la question de l'utilisation de Redux !</p>\\n<p>Mais avant cela, il existe maintenant une solution très simple permettant de transmettre des informations depuis un composant vers un autre composant plus profond du DOM : le <a href=\\\"https://reactjs.org/docs/context.html\\\"><strong>Context</strong></a> de React.</p>\\n<h3>React Context</h3>\\n<p>La méthode <code class=\\\"language-text\\\">React.createContext</code> va nous permettre de générer un :</p>\\n<ul>\\n<li><code class=\\\"language-text\\\">Provider</code> chargé de <em>distribuer</em> la donnée,</li>\\n<li><code class=\\\"language-text\\\">Consumer</code> qui sera capable de lire la donnée du provider.</li>\\n</ul>\\n<blockquote>\\n<p>On peut noter au passage que le <code class=\\\"language-text\\\">Consumer</code> utilise la pattern de <strong>render prop</strong>.</p>\\n</blockquote>\\n<p>Reprenons nos trois composants précédents.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// in App.js</span>\\n<span class=\\\"token keyword\\\">import</span> React<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> Component <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> BrowserRouter <span class=\\\"token keyword\\\">as</span> Router<span class=\\\"token punctuation\\\">,</span> Route<span class=\\\"token punctuation\\\">,</span> Switch <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-router-dom'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> styled <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'styled-components'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> decode <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'jsonwebtoken'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token operator\\\">...</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> UserContext <span class=\\\"token operator\\\">=</span> React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createContext</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    user<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n    onLogout<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">App</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Component</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token operator\\\">...</span>\\n\\n    <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> user <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n            <span class=\\\"token operator\\\">&lt;</span>UserContext<span class=\\\"token punctuation\\\">.</span>Provider\\n                value<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span>\\n                    user<span class=\\\"token punctuation\\\">,</span>\\n                    onLogout<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleLogout<span class=\\\"token punctuation\\\">,</span>\\n                <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token operator\\\">></span>\\n                <span class=\\\"token operator\\\">&lt;</span>Router<span class=\\\"token operator\\\">></span>\\n                    <span class=\\\"token operator\\\">&lt;</span>Container<span class=\\\"token operator\\\">></span>\\n                        <span class=\\\"token operator\\\">&lt;</span>Header <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n                        <span class=\\\"token operator\\\">&lt;</span>Switch<span class=\\\"token operator\\\">></span>\\n                            <span class=\\\"token operator\\\">&lt;</span>PrivateRoute\\n                                exact\\n                                path<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"/\\\"</span>\\n                                render<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> location <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n                                    <span class=\\\"token operator\\\">&lt;</span>Home location<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>location<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n                                <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n                            <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n                        <span class=\\\"token operator\\\">...</span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// in PrivateRoute.js</span>\\n<span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> PropTypes <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'prop-types'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Redirect<span class=\\\"token punctuation\\\">,</span> Route <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-router'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> UserContext <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./App'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">PrivateRouteWithoutContext</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> user<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>rest <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n    user <span class=\\\"token operator\\\">?</span> <span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token operator\\\">&lt;</span>Route <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>rest<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token operator\\\">&lt;</span>Redirect\\n            to<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span>\\n                pathname<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'/login'</span><span class=\\\"token punctuation\\\">,</span>\\n                state<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">:</span> rest<span class=\\\"token punctuation\\\">.</span>location <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nPrivateRouteWithoutContext<span class=\\\"token punctuation\\\">.</span>propTypes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    user<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>object<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">PrivateRoute</span> <span class=\\\"token operator\\\">=</span> props <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token operator\\\">&lt;</span>UserContext<span class=\\\"token punctuation\\\">.</span>Consumer<span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> user <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n                <span class=\\\"token operator\\\">&lt;</span>PrivateRouteWithoutContext user<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>user<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>props<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>UserContext<span class=\\\"token punctuation\\\">.</span>Consumer<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// in components/Header.js</span>\\n<span class=\\\"token keyword\\\">import</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> PropTypes <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'prop-types'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> UserContext <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'../App'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Navigation <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./Navigation'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">HeaderWithoutContext</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> user<span class=\\\"token punctuation\\\">,</span> onLogout <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>header<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>h1<span class=\\\"token operator\\\">></span>JavaScript Playground<span class=\\\"token punctuation\\\">:</span> meetups<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h1<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">{</span>user <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token operator\\\">&lt;</span>Navigation onLogout<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>onLogout<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>header<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nHeaderWithoutContext<span class=\\\"token punctuation\\\">.</span>propTypes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    user<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>object<span class=\\\"token punctuation\\\">,</span>\\n    onLogout<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>func<span class=\\\"token punctuation\\\">.</span>isRequired<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">Header</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token operator\\\">&lt;</span>UserContext<span class=\\\"token punctuation\\\">.</span>Consumer<span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> user<span class=\\\"token punctuation\\\">,</span> onLogout <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n                <span class=\\\"token operator\\\">&lt;</span>HeaderWithoutContext user<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>user<span class=\\\"token punctuation\\\">}</span> onLogout<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>onLogout<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>UserContext<span class=\\\"token punctuation\\\">.</span>Consumer<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Le <strong>Context</strong> de React est un moyen simple de <em>télétransporter</em> directement de la donnée d'un composant <em>N</em> de l'application à n'importe quel composant enfant <em>N-x</em>.</p>\\n<h2>Conclusion</h2>\\n<p>L'intégration de <strong>Redux</strong> dans son <a href=\\\"https://blog.kentcdodds.com/concerning-toolkits-4db57296e1c3\\\">toolkit</a> de démarage de projet n'est sans doute pas une excelente idée. C'est un outil puissant mais il ne correspond pas à tous les cas d'utilisation , il solutionne plutôt une complexité de projet particulière.  </p>\\n<p>Ce n'est d'ailleurs pas une nouveauté 😄</p>\\n<blockquote class=\\\"twitter-tweet\\\" data-lang=\\\"fr\\\"><p lang=\\\"en\\\" dir=\\\"ltr\\\">Flux libraries are like glasses: you’ll know when you need them.</p>&mdash; Dan Abramov (@dan_abramov) <a href=\\\"https://twitter.com/dan_abramov/status/704304462739939328?ref_src=twsrc%5Etfw\\\">29 février 2016</a></blockquote>\\n<script async src=\\\"https://platform.twitter.com/widgets.js\\\" charset=\\\"utf-8\\\"></script>\\n<p>Mais il existe maintenant de nombreux outils et patterns à ajouter à ce toolkit permettant de répondre simplement aux problématiques de factorisation de comportements (la pattern <strong>render prop</strong>) ou de partage de state (le <strong>Context</strong> React).</p>\",\"frontmatter\":{\"title\":\"Avec ou sans Redux ?\",\"date\":\"2018-06-04\",\"tags\":[\"react\",\"redux\",\"render prop\",\"react context\"],\"description\":\"Redux est un outil fantastique, mais convient-t-il à toutes les situations ? Sans doute pas.\"}}},\"pathContext\":{\"slug\":\"avec-ou-sans-redux\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/avec-ou-sans-redux.json\n// module id = 373\n// module chunks = 261154270709379"],"sourceRoot":""}