{"data":{"markdownRemark":{"html":"<p>Pour un projet, il a fallu lancer rapidement un serveur de staging (agilité oblige) en attendant la mise à disposition du serveur de staging final. Sans être aussi rapide qu'avec un service comme <a href=\"https://zeit.co/now\">Zeit Now</a> ou l'utilisation d'un <a href=\"https://ngrok.com/\">ngrock</a>, il est possible sur AWS lancer un serveur fonctionnel en moins de 10 minutes.</p>\n<h2>Création d'une instance Amazon Lightsail</h2>\n<p>Généralement, j'opte pour une instance EC2. Mais nous avons voulu tester <a href=\"https://lightsail.aws.amazon.com\">Lightsail</a>, entre autres parce que l'instance minimale est plus puissante qu'une EC2 minimale, que c'est gratuit le premier mois et que le tarif reste raisonnable pour la suite (3.5$/m).\nC'est donc une instance minimale qui est choisie: 512 Mo, 1vCPU et un SSD de 20GO, avec l'OS <a href=\"https://aws.amazon.com/fr/amazon-linux-ami/\">Amazon Linux</a>.</p>\n<p>La provision du serveur a pris moins de 3 min et je me connecte en ssh grâce à la clé .pem générée.</p>\n<h2>Ajout d'une IP fixe</h2>\n<p>Lorsque on lance une instance EC2, on obtient une URL, certes obscure, mais une URL. Ce n'est pas le cas sur lightsail: l'instance possède par défaut une IP, qui n'est pas fixe. Mais il est possible gratuitement d'y associer un IP fixe, ne restera plus qu'à rediriger un sous-domaine sur cette IP.<br>\nEt non, cela ne sera pas faisable en moins de 10 minutes, qu'à cela ne tienne, je me contenterais de l'IP.</p>\n<h2>Création d'un swap</h2>\n<p>Ensuite, le gros point noir de l'instance, c'est ses 512 Mo de mémoire, vraiment trop court pour espérer pouvoir lancer un build d'image Docker par exemple. Du coup, il faut aider un peu la mini-instance en ajoutant du swap.</p>\n<p>Pour cela, il faut créer un fichier de swap de 1Go (1024 * 1024MB => 1048576)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">dd</span> if<span class=\"token operator\">=</span>/dev/zero of<span class=\"token operator\">=</span>/swapfile1 bs<span class=\"token operator\">=</span>1024 count<span class=\"token operator\">=</span>1048576\n<span class=\"token function\">sudo</span> <span class=\"token function\">chown</span> root:root /swapfile1\n<span class=\"token function\">sudo</span> <span class=\"token function\">chmod</span> 0600 /swapfile1</code></pre></div>\n<p>Puis l'activer</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> mkswap /swapfile1\n<span class=\"token function\">sudo</span> swapon /swapfile1</code></pre></div>\n<p>Pour que le swap soit toujours présent en cas de reboot de l'instance, il faut ajouter le swap au fichier <code class=\"language-text\">fstab</code> :</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># in /etc/fstab</span>\n/swapfile1 none swap sw 0 0</code></pre></div>\n<p>Vérifions la mise en place du swap avec la commande <code class=\"language-text\">free -m</code> :</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">             total       used       free     shared    buffers     cached\nMem:           483        474          8          0         12        394\n-/+ buffers/cache:         68        415\nSwap:         1023          0       1023</code></pre></div>\n<blockquote>\n<p>En fait, toutes ces commandes proviennent du post <a href=\"https://www.cyberciti.biz/faq/linux-add-a-swap-file-howto/\">Linux Add a Swap File - HowTo - nixCraft</a></p>\n</blockquote>\n<h2>Installation de Docker</h2>\n<p>L'intégralité du projet à déployer sur ce staging est géré sous docker-compose. Il faut donc installer Docker et docker-compose.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> -y docker\n<span class=\"token function\">sudo</span> <span class=\"token function\">service</span> docker start\n<span class=\"token function\">sudo</span> <span class=\"token function\">usermod</span> -a -G docker ec2-user\n\n<span class=\"token function\">sudo</span> <span class=\"token function\">curl</span> -L <span class=\"token string\">\"https://github.com/docker/compose/releases/download/1.22.0/docker-compose-<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">uname</span> -s<span class=\"token variable\">)</span></span>-<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">uname</span> -m<span class=\"token variable\">)</span></span>\"</span> -o /usr/local/bin/docker-compose\n<span class=\"token function\">sudo</span> <span class=\"token function\">chmod</span> +x /usr/local/bin/docker-compose</code></pre></div>\n<p>Il faut se déconnecter puis se reconnecter du ssh pour que les nouveaux droits soient pris, et permettre de lancer un <code class=\"language-text\">docker version</code> puis un <code class=\"language-text\">docker-compose version</code>permettant de valider l'installation.</p>\n<h2>Autres utilitaires</h2>\n<p>Pour simplifier le gestion de du serveur, j'installe un minimum d'outils de monitoring: <a href=\"https://hisham.hm/htop/\">htop</a> et <a href=\"https://github.com/bcicen/ctop\">ctop</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> -y <span class=\"token function\">htop</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">wget</span> https://github.com/bcicen/ctop/releases/download/v0.7.1/ctop-0.7.1-linux-amd64 -O /usr/local/bin/ctop\n<span class=\"token function\">sudo</span> <span class=\"token function\">chmod</span> +x /usr/local/bin/ctop</code></pre></div>\n<p>Ne manque plus que git pour récupperer le code du projet.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> -y <span class=\"token function\">git</span> </code></pre></div>\n<h2>Tadam</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://monprojet.git\n<span class=\"token function\">cd</span> monprojet\n<span class=\"token function\">make</span> <span class=\"token function\">install</span>\n<span class=\"token function\">make</span> run</code></pre></div>\n<p>Et voilà ! En 10 minutes (environ, en vrai je n'avais de chronomètre), le projet est accessible publiquement.\nJ'ai mis plus de temps à écrire ce post de blog.</p>","frontmatter":{"title":"Un serveur en deux deux","date":"2018-10-18","tags":["devops","aws"],"description":"Comment lancer un projet docker-compose sur un serveur publique en moins de 10 minutes"}}},"pageContext":{"slug":"un-serveur-en-deux-deux"}}