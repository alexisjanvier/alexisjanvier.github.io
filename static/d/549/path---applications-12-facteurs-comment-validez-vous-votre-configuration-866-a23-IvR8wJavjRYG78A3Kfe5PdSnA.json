{"data":{"markdownRemark":{"html":"<p>L’arrivée de Docker a fortement impacté l’architecture de nos applications. Si nous l’avons au début surtout utilisé pour faciliter le développement local, il n’est maintenant pas rare que Docker soit également utilisé en production, et que nous délivrions nos applications sous forme d’images d’un ou plusieurs services. Ce type de conception apporte beaucoup de souplesse en termes de développement, mais aussi son lot de complexité. <a href=\"https://12factor.net/fr/\">La méthodologie 12 facteurs</a> est une référence fiable en ce qui concerne les bonnes pratiques d’applications constituées en services. </p>\n<p>Ce post se réfère au troisième point de ces 12 facteurs : <a href=\"https://12factor.net/fr/config\">la configuration</a>.</p>\n<h2>Le problème</h2>\n<p>Les 12 facteurs préconisent</p>\n<blockquote>\n<p>une <strong>stricte séparation de la configuration et du code</strong>. La configuration peut varier substantiellement à travers les déploiements, alors que ce n’est pas le cas du code. [..] <strong>Les applications 12 facteurs stockent la configuration dans des variables d’environnement</strong></p>\n</blockquote>\n<p>Jusqu’à présent, nos projets gérés sous Docker utilisent soit Docker Compose, soit Docker Swarm sur les serveurs des clients (nous n’avons pas encore eu l’occasion de mettre en place un Kubernetes par exemple). Le client nous met à disposition une registry pour que nous puissions livrer les images des services, nous maintenons de concert le fichier <code class=\"language-text\">docker-compose.yml</code> (ou <code class=\"language-text\">swarm.yml</code>), mais seul le client est responsable au fil des livraisons du fichier <code class=\"language-text\">x. env</code> des variables d’environnement injectées dans les containers.</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\">// in swarm.yml\n\nversion: &quot;3.4&quot;\n\nservices:\n  service1:\n    image: service1\n    env_file:\n      - ./staging.env\n  service2:\n    image: service2\n    env_file:\n      - ./staging.env\n  ...</code></pre></div>\n<p><strong>Mais comment s’assurer que les variables d’environnement du client soient toutes présentes et valides pour chaque version livrée, tout en lui permettant de ne pas nous les communiquer (accès aux bases de données, à des webservices internes...) ?</strong></p>\n<h2>Notre solution actuelle</h2>\n<p>Le solution la plus simple que nous ayons trouvée pour le moment est de livrer au client une image spéfique dont le seul rôle est justement de valider ces variables d'environnement.</p>\n<p>Et pour cela, nous avons utilisé un outil javascript de gestion de configuration que nous connaissions bien : convict.</p>\n<p><code class=\"language-text\">convict</code> permet d'écrire un <code class=\"language-text\">schema</code> dans lequel la configuration est décrite sous la forme:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token constant\">VARIABLE_NAME</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">{</span>\n    doc<span class=\"token punctuation\">:</span><span class=\"token string\">\"Variable description\"</span><span class=\"token punctuation\">,</span>\n    format<span class=\"token punctuation\">:</span><span class=\"token string\">\"Le format de la variable. Ce peut-être des formats fournis par convict (`ipaddress`,`port`, ...) ou une fonction de validation\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"La valeur par default, ne pouvant être null\"</span><span class=\"token punctuation\">,</span>\n    env<span class=\"token punctuation\">:</span><span class=\"token string\">\"Si la variable spécifiée par env a une valeur, elle écrase la valeur par défaut du paramètre.\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p> L'idée va donc être de définir toutes nos variables d'environnement dans ce <code class=\"language-text\">schema</code>, de pouvoir les décrire avec <code class=\"language-text\">doc</code>, de leur mettre un valeur par default à <code class=\"language-text\"></code> et de systématiquement renseigner <code class=\"language-text\">env</code>.</p>\n<p> Par exemple, considérons que la configuration de notre application nécessite trois variables d'environnement <code class=\"language-text\">NODE_ENV</code>, <code class=\"language-text\">POSTGRES_PASSWORD</code> et <code class=\"language-text\">POSTGRES_USER</code>, voici ce que donnera le <code class=\"language-text\">schema</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// in src/config</span>\n\n<span class=\"token keyword\">const</span> convict <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'convict'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isNotEmpty</span> <span class=\"token operator\">=</span> val <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>val<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'This environment variable cannot be empty'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token function\">convict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n   <span class=\"token constant\">NODE_ENV</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n       doc<span class=\"token punctuation\">:</span> <span class=\"token string\">'The application environment.'</span><span class=\"token punctuation\">,</span>\n       env<span class=\"token punctuation\">:</span> <span class=\"token string\">'NODE_ENV'</span><span class=\"token punctuation\">,</span>\n       format<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'production'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'test'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token constant\">POSTGRES_PASSWORD</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n       doc<span class=\"token punctuation\">:</span> <span class=\"token string\">\"PostgreSQL's user password\"</span><span class=\"token punctuation\">,</span>\n       env<span class=\"token punctuation\">:</span> <span class=\"token string\">'POSTGRES_PASSWORD'</span><span class=\"token punctuation\">,</span>\n       format<span class=\"token punctuation\">:</span> isNotEmpty<span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token constant\">POSTGRES_USER</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n       doc<span class=\"token punctuation\">:</span> <span class=\"token string\">\"PostgreSQL's user\"</span><span class=\"token punctuation\">,</span>\n       env<span class=\"token punctuation\">:</span> <span class=\"token string\">'POSTGRES_USER'</span><span class=\"token punctuation\">,</span>\n       format<span class=\"token punctuation\">:</span> isNotEmpty<span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> config<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ensuite, la methode <code class=\"language-text\">validate</code> de convict appliquée sur un fichier de configuration vide <code class=\"language-text\">config.load({})</code> va permettre de s'assurer que la validation ne soit faite que sur les variables d'environnement présentes.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// in src/index.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Signale <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'signale'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./config'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">validateConfiguration</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    config<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        config<span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> allowed<span class=\"token punctuation\">:</span> <span class=\"token string\">'strict'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        signale<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        signale<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`\\\\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>error<span class=\"token punctuation\">.</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\\\n`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><em>Remarque: <a href=\"https://www.npmjs.com/package/signale\"><code class=\"language-text\">signale</code></a> est utiliser pour rendre la sortie console plus lisible.</em></p>\n<p>Il ne reste plus qu'à créer une image à partir des deux fichiers <code class=\"language-text\">index.js</code> et <code class=\"language-text\">config.js</code></p>\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\">// in Dockerfile\n<span class=\"token keyword\">FROM</span> node<span class=\"token punctuation\">:</span>dubnium<span class=\"token punctuation\">-</span>alpine\n\n<span class=\"token keyword\">COPY</span> ./src ./validator\n<span class=\"token keyword\">WORKDIR</span> /validator\n<span class=\"token keyword\">COPY</span> ./package.json ./package.json\n<span class=\"token keyword\">COPY</span> ./yarn.lock ./yarn.lock\n<span class=\"token keyword\">RUN</span> yarn install <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>non<span class=\"token punctuation\">-</span>interactive  <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>frozen<span class=\"token punctuation\">-</span>lockfile\n\n<span class=\"token keyword\">CMD</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"index.js\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"validate\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker build -t myapp_conf_validation:latest</code></pre></div>\n<p>Pour être en mesure de lancer la validation de notre fichier <code class=\"language-text\">myenv.env</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker run --rm -it --env-file<span class=\"token operator\">=</span>myenv.env myapp_conf_validation:latest</code></pre></div>\n<p><img src=\"/images/env_validation.gif\" alt=\"Résultat final\"></p>\n<p>Le code est disponible sur <a href=\"https://github.com/marmelab/twelve-app-conf-validator\">Github</a></p>\n<h2>Conclusion</h2>\n<p>Cet outil nous a permis de fluidifier la collaboration avec les responsables de l’exploitation de nos applications et d’éviter plusieurs erreurs lors des déploiements. En cela, c’est un bon outil puisqu’il résout un problème.</p>\n<p>Pour autant il reste très imparfait. Particulièrement parce qu’il ne peut pas s’intégrer dans une automatisation des déploiements.</p>\n<p>Et vous, comment faites-vous par valider la configuration des vos applications 12 facteurs sur l’ensemble de vos environnements ?</p>","frontmatter":{"cover":"devDiary.jpg","date":"2018-12-02","description":"Dès lors que nous livrons notre code sous forme d’image docker, comment s’assurer que la configuration de l’environnement d’exécution sera correcte ?","slug":"applications-12-facteurs-comment-validez-vous-votre-configuration","tags":["docker","twelve-factor"],"title":"Applications 12 facteurs: comment validez-vous votre configuration ?"}}},"pageContext":{"slug":"applications-12-facteurs-comment-validez-vous-votre-configuration"}}