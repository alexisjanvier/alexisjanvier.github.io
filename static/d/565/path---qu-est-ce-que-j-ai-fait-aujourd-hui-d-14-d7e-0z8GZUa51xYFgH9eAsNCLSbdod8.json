{"data":{"markdownRemark":{"html":"<p>C’est très clairement une bonne habitude que de noter toutes ces petites choses apprises au jour le jour. Pourtant ce n’est pas toujours facile d’intégrer un outil de notes dans ce quotidien. J’ai déjà essayé pas mal d'outils' : jrnl mais je n’ai jamais réussi à me souvenir des commandes, boostnote que je n’utilise pas lorsque je code car c’est encore une fenêtre en plus, ou encore gist mais je n’arrive pas à le tenir organisé…</p>\n<p>Et puis j'ai reçu ce lien <a href=\"https://theptrk.com/2018/07/11/did-txt-file/\">did.txt file</a> dans ma newsletter <a href=\"https://changelog.com/\">changelog</a>.</p>\n<h2>did.txt</h2>\n<p>Voici comment <a href=\"https://theptrk.com/about/\">Patrick</a> introduit son article:</p>\n<blockquote>\n<p>Goal: create an insanely simple “did” file accessible by terminal</p>\n</blockquote>\n<p>Et clairement, c'est très simple et diablement efficace. Il s'agit juste d'ajouter un alias dans son <code class=\"language-text\">.bash_profile</code> ou son <code class=\"language-text\">.zshrc</code> :</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">alias</span> did<span class=\"token operator\">=</span><span class=\"token string\">\"vim +'normal Go' +'r!date' ~/did.txt\"</span></code></pre></div>\n<p>En une commande, on ouvre dans son terminal - sans quitter son environnement de travail donc - un fichier avec la date du jour dans lequel il ne reste plus qu'à noter cette petite chose que vous venez d'apprendre.</p>\n<p><img src=\":storage/did/did_init.gif\" alt=\"Did : la commande d&#x27;origine\"></p>\n<p>Et ça m'a beaucoup plu cette idée d'avoir un nouvel outil construit avec ce que l'on a déjà sous la main sur le système. C'est très simple. </p>\n<p>Sans doute un peu trop simple. Par exemple, voici ce qui se passe si on utilise deux fois la commande dans le même journée :</p>\n<p><img src=\":storage/did/did_init_pbl.gif\" alt=\"Sans doute trop simple\"></p>\n<p>En fait, très rapidement deux problèmes ont émergé me faisant penser que je n'intégrerais pas cette commande <code class=\"language-text\">did</code>à mon quotidien :</p>\n<ul>\n<li><strong>Toutes les notes sont dans un seul fichier</strong>, et comme il s'agit de notes quotidiennes, ce fichier risque de devenir beaucoup trop long pour être exploitable. L'intérêt de prendre des notes, c'est de pouvoir les relire !</li>\n<li><strong>Le fichier est en <code class=\"language-text\">.txt</code></strong>, ce qui limite très fortement la mise en forme des notes, entre autres les extraits de code.</li>\n</ul>\n<p>Qu'à cela ne tienne, j'étais en vacance ce jour de newsletter, ce post documente comment j'ai adapté cette bonne idée à ce dont j'avais besoin en tachant de garder la même simplicité que le <code class=\"language-text\">did</code> initial et en continuant à n'utiliser que ce qui était déjà disponible dans la console.</p>\n<h2>Un journal par semaine</h2>\n<p>Travaillant en sprint de deux semaines, la découpe de l'unique fichier en plusieurs journaux hebdomadaire c'est tout de suite imposée.</p>\n<p>Je ne vais pas rentrer dans les détails de l'implementation mais tout de suite vous montrer le résultat (presque) final:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">export</span> DID_PATH<span class=\"token operator\">=</span>~/.did\n\n<span class=\"token keyword\">function</span> did<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">export</span> LC_ALL<span class=\"token operator\">=</span>C\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> -f <span class=\"token variable\">${DID_PATH}</span>/<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +%Y-%V<span class=\"token variable\">)</span></span>.md <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string\">\"# Week <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +\"%V <span class=\"token punctuation\">(</span>%B %Y<span class=\"token variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span> \\n\\n<span class=\"token comment\">## $(date +\"%A %Y-%m-%d\")\" > ${DID_PATH}/$(date +%Y-%V).md</span>\n    <span class=\"token keyword\">fi</span>\n    FILE_EDITION_DATE<span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">stat</span> -c <span class=\"token string\">\"%y\"</span> $<span class=\"token punctuation\">{</span>DID_PATH<span class=\"token punctuation\">}</span>/<span class=\"token punctuation\">$(</span>date +%Y-%V<span class=\"token variable\">)</span></span>.md)\"</span>\n    NOW<span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +<span class=\"token string\">\"%Y-%m-%d\"</span><span class=\"token variable\">)</span></span>\"</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">${FILE_EDITION_DATE:0:10}</span> <span class=\"token operator\">!=</span> <span class=\"token variable\">${NOW}</span> <span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">then</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string\">\"\\n## <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +<span class=\"token string\">\"%A %Y-%m-%d\"</span><span class=\"token variable\">)</span></span>\\n\"</span> <span class=\"token operator\">>></span> <span class=\"token variable\">${DID_PATH}</span>/<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +%Y-%V<span class=\"token variable\">)</span></span>.md\n    <span class=\"token keyword\">fi</span>\n    unset LC_ALL\n    vim +<span class=\"token string\">'normal Go'</span> <span class=\"token variable\">${DID_PATH}</span>/<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +%Y-%V<span class=\"token variable\">)</span></span>.md\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Très clairement, l'option <code class=\"language-text\">--help</code>, <code class=\"language-text\">man</code> et Google ont été mes amis pour arriver à ce résultat. Voici tout de même les points qui me semblent important.</p>\n<ul>\n<li><strong>Une fonction plutôt qu'un alias</strong> : avec l'introduction d'une logique de type <em>si le journal existe, alors, sinon</em>, il a fallut remplacer le simple alias par une fonction shell. <code class=\"language-text\">if [ ! -f ${DID_PATH}/$(date +%Y-%V).md ]; then</code></li>\n<li><strong>La commande <code class=\"language-text\">date</code></strong> : c'est certainement la commande que j'ai le plus testé. Ici elle est simplement utilisée pour formater la date courante. Comme par exemple <code class=\"language-text\">date +%Y-%V</code></li>\n<li><strong>La commande <code class=\"language-text\">stat</code></strong> : elle permet de récuperer beaucoup d'information sur un fichier, et notament la date de dernière modification <code class=\"language-text\">stat -c &quot;%y&quot; ${DID_PATH}/$(date +%Y-%V).md</code>. C'est ce qui m'a permis de savoir si le fichier avait déja été éditer dans le journée ou non, pour savoir si il fallait rajouter cette date.</li>\n<li><strong>La locale du terminal</strong> : la commande date est sensible à la locale du terminal. J'avais donc des mois et des jours en français. Pour pouvoir tenir mes notes en anglais, il a fallut changer la local du terminal le temps de l'execution de la commande avec un <code class=\"language-text\">LC_ALL=C</code></li>\n<li><strong>La variable d'environnement <code class=\"language-text\">DID_PATH</code></strong> : cette variable semble très logique, puisqu'elle simplifie l'écriture du script, et permet de changer très facilement le répertoire de stockage des journaux. Mais elle a un effet de bord génial : en utilisant <a href=\"https://direnv.net/\">direnv</a>, cela va permettre de créer très facilement des notes spécifiques par projet !</li>\n</ul>\n<p><img src=\":storage/did/did.gif\" alt=\"la nouvelle commande did\"></p>\n<p>Première conclusion <a href=\"https://medium.com/@kadavy/complexity-is-creepy-its-never-just-one-more-thing-79a6a89192db\">Complexity is creepy: It’s never just “one more thing.”</a></p>\n<ul>\n<li>Avec le <code class=\"language-text\">did</code> initial, j'ouvrais toujours le même fichier. Mais maintenant que <code class=\"language-text\">did</code> ouvre le journal de la semaine courante, <strong>comment je vais visualiser mes notes de la semaine dernière</strong> ?</li>\n<li>Si je veux ouvrir un journal passé, <strong>comment je vais savoir quels journaux existent</strong> ?</li>\n<li>Avec le <code class=\"language-text\">did</code> inital, je pouvais faire une recherche avec <code class=\"language-text\">vim</code> au sein de mon unique fichier. Mais maintenant, <strong>comment je vais retouver une note au sein de tous les journaux</strong> ?</li>\n</ul>\n<h2>Visualiser un journal spécifique : <code class=\"language-text\">didv</code></h2>\n<p>paramètre de commande\nbat</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">function</span> didv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$1</span> <span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">then</span>\n         vmd <span class=\"token variable\">${DID_PATH}</span>/<span class=\"token variable\">${1}</span>.md\n    <span class=\"token keyword\">else</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> -f <span class=\"token variable\">${DID_PATH}</span>/<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +%Y-%V<span class=\"token variable\">)</span></span>.md <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n            LC_ALL<span class=\"token operator\">=</span>C <span class=\"token keyword\">echo</span> <span class=\"token string\">\"# Week <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +\"%V <span class=\"token punctuation\">(</span>%B %Y<span class=\"token variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span> \\n\\n<span class=\"token comment\">## $(date +\"%A %Y-%m-%d\")\" > ${DID_PATH}/$(date +%Y-%V).md</span>\n        <span class=\"token keyword\">fi</span>\n        vmd <span class=\"token variable\">${DID_PATH}</span>/<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +%Y-%V<span class=\"token variable\">)</span></span>.md\n    <span class=\"token keyword\">fi</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Lister les journaux hebdomadaires : <code class=\"language-text\">didl</code></h2>\n<p>Retrouver la mois depuis le numero de semaine</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">function</span> week2Month<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">export</span> LC_ALL<span class=\"token operator\">=</span>C\n    year<span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token keyword\">echo</span> $1 <span class=\"token operator\">|</span> <span class=\"token function\">cut</span> -f1 -d-<span class=\"token variable\">)</span></span>\n    week<span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token keyword\">echo</span> $1 <span class=\"token operator\">|</span> <span class=\"token function\">cut</span> -f2 -d-<span class=\"token variable\">)</span></span>\n    local dayofweek<span class=\"token operator\">=</span>1 <span class=\"token comment\"># 1 for monday</span>\n    <span class=\"token function\">date</span> -d <span class=\"token string\">\"<span class=\"token variable\">$year</span>-01-01 +<span class=\"token variable\"><span class=\"token variable\">$((</span> $week <span class=\"token operator\">*</span> <span class=\"token number\">7</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> $<span class=\"token punctuation\">(</span>date <span class=\"token operator\">-</span>d \"$year<span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">04</span>\" <span class=\"token operator\">+</span><span class=\"token operator\">%</span>w <span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">3</span> <span class=\"token variable\">))</span></span> days -2 days + <span class=\"token variable\">$dayofweek</span> days\"</span> +<span class=\"token string\">\"%B %Y\"</span>\n    unset LC_ALL\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> didl<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">export</span> LC_ALL<span class=\"token operator\">=</span>C\n    <span class=\"token keyword\">for</span> <span class=\"token function\">file</span> <span class=\"token keyword\">in</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">ls</span> $<span class=\"token punctuation\">{</span>DID_PATH<span class=\"token punctuation\">}</span>/*.md <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> -Mr<span class=\"token variable\">`</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n        filenameRaw<span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">basename</span> $<span class=\"token punctuation\">{</span>file<span class=\"token punctuation\">}</span><span class=\"token variable\">)</span></span>\"</span>\n        filename<span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">${filenameRaw%.*}</span>\"</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">${filename}</span> (<span class=\"token variable\"><span class=\"token variable\">$(</span>week2Month $<span class=\"token punctuation\">{</span>filename<span class=\"token punctuation\">}</span><span class=\"token variable\">)</span></span>)\"</span>\n    <span class=\"token keyword\">done</span>\n    unset LC_ALL\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Faire une recherche dans les journaux hebdomadaires : <code class=\"language-text\">dids</code></h2>\n<p>commande date encore\ncommande ls\ncommande split</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">function</span> dids<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">export</span> LC_ALL<span class=\"token operator\">=</span>C\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$1</span> <span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">then</span>\n        <span class=\"token keyword\">for</span> <span class=\"token function\">file</span> <span class=\"token keyword\">in</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">ls</span> $<span class=\"token punctuation\">{</span>DID_PATH<span class=\"token punctuation\">}</span>/*.md <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> -Vr<span class=\"token variable\">`</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n            NB_OCCURENCE<span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">grep</span> -c @$<span class=\"token punctuation\">{</span>1<span class=\"token punctuation\">}</span> $<span class=\"token punctuation\">{</span>file<span class=\"token punctuation\">}</span><span class=\"token variable\">)</span></span>\"</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">${NB_OCCURENCE}</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"0\"</span> <span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">then</span>\n                filenameRaw<span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">basename</span> $<span class=\"token punctuation\">{</span>file<span class=\"token punctuation\">}</span><span class=\"token variable\">)</span></span>\"</span>\n                filename<span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">${filenameRaw%.*}</span>\"</span>\n                <span class=\"token keyword\">echo</span> -e <span class=\"token string\">\"\\n\\e[32m=> <span class=\"token variable\">${filename}</span> (<span class=\"token variable\"><span class=\"token variable\">$(</span>week2Month $<span class=\"token punctuation\">{</span>filename<span class=\"token punctuation\">}</span><span class=\"token variable\">)</span></span>, <span class=\"token variable\">${NB_OCCURENCE}</span> results) \\e[0m\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">grep</span> -n -B 1 <span class=\"token variable\">${1}</span> <span class=\"token variable\">${file}</span>\n            <span class=\"token keyword\">fi</span>\n        <span class=\"token keyword\">done</span>\n    <span class=\"token keyword\">else</span>\n         <span class=\"token keyword\">echo</span> <span class=\"token string\">\"You must add a something to search...\"</span>\n    <span class=\"token keyword\">fi</span>\n    <span class=\"token function\">export</span> LC_ALL<span class=\"token operator\">=</span>C\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Formater les notes : <code class=\"language-text\">markdown</code></h2>\n<p>Du python, une dépendance. Mais c'est plus joli Je suis un punk\n<a href=\"https://tosbourn.com/view-markdown-files-terminal/\">View Markdown Files in your Terminal</a>\n<a href=\"https://github.com/axiros/terminal_markdown_viewer\">vmd</a>\n<a href=\"https://github.com/cpascoe95/vmd\">GitHub - cpascoe95/vmd: Terminal Markdown Viewer</a></p>\n<h2>Les commandes finales</h2>\n<script src=\"https://gist.github.com/alexisjanvier/bfe71d18f68434e29c08637e4d837c74.js\"></script>\n<p><code class=\"language-text\">gist:https://gist.github.com/halkeye/f061872eb4b47dc0928e</code></p>\n<h2>Conclusion</h2>\n<p>Très fun, et tout (ou presque) là ! 50 lignes pour un outil qui marche ! Importance de bien connaitre son outil de travail, man ou tldr.\nLe suite : publier en ligne, puisque c'est du markdown !\nlow dev, vs low tech</p>","frontmatter":{"title":"Qu'est-ce que j'ai fait aujourd'hui ?\"","date":"2018-11-03","tags":["cli","tool"],"description":"Une chose que j’aime particulièrement dans mon métier de développeur, c’est que l’on apprend tout le temps de nouvelles choses : un nouveau pattern, une nouvelle lib, une obscure astuce de configuration… Mais dans le feu de l’action on se réjouit mais quelques jours après, souvent on l’oublie. Et on se dit que l’on aurait bien fait de la noter."}}},"pageContext":{"slug":"qu-est-ce-que-j-ai-fait-aujourd-hui"}}