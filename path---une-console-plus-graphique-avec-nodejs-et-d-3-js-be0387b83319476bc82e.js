webpackJsonp([31427655937549],{391:function(n,s){n.exports={data:{markdownRemark:{html:'<img src="/images/blog/treedu1.png" class="medium" >\n<p>On présente souvent node.js comme un outil très pratique pour exécuter du code javascript côté serveur. Mais il sert à beaucoup d\'autres choses comme exécuter du javascript côté … poste de travail ; Gulp ou Yeoman en sont des exemples évidents. Pour ce 4ième projet « un produit fonctionnel par semaine sur une techno inconnue », j\'ai découvert node.js et d3.js. L\'objectif : rendre plus graphique la commande <a href="http://fr.wikipedia.org/wiki/Du_(Unix)"><code class="language-text">du</code></a>.</p>\n<h2>Des promesses pour calculer la taille des répertoires</h2>\n<p><code class="language-text">du</code> doit afficher l\'espace disque alloué pour tous les fichiers et dossiers contenus dans le dossier courant. Le but du projet sera de représenter sous une forme graphique l\'occupation du répertoire courant.\nNode.js dispose pour cela d\'une bibliothèque très complète : <a href="http://nodejs.org/api/fs.html"><code class="language-text">fs</code></a>. La problématique consistait donc plutôt à rendre le processus performant : il fallait analyser chaque sous répertoire en parallèle afin de ne pas rendre l\'exécution de la commande trop longue. Et pour cela, l\'utilisation de promesses semblait tout indiquée, node.js disposant de plusieurs bibliothèques permettant de les gérer. L\'une des plus utilisées est <a href="https://github.com/kriskowal/q">Q</a>. Il existe également une adaptation de <code class="language-text">fs</code> aux promesses : <a href="https://github.com/kriskowal/q-io">q-io</a> (les fonctions ne prennent plus de callback en paramètre, mais renvoient des promesses) .\nSans surprise, le fonctionnement des promesses est le même que sous angular, avec la déclaration d\'un <code class="language-text">deferred</code>, résolu en cas de succès, rejeté en cas d\'erreur :</p>\n<div class="gatsby-highlight" data-language="javascript">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span>\n\n<span class="token keyword">var</span> deferred <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">getSize</span><span class="token punctuation">(</span>folder<span class="token punctuation">.</span>path<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> deferred<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    self<span class="token punctuation">.</span>folders<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token punctuation">:</span> folder<span class="token punctuation">.</span>path<span class="token punctuation">,</span> size<span class="token punctuation">:</span> size<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    deferred<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span></code></pre>\n      </div>\n<p>Pour être performant, il ne s\'agissait pas de lancer le calcul de taille de tous les répertoires en les chainant avec des <code class="language-text">then</code>, mais plutôt de pouvoir les lancer tous en parallèle et de ne renvoyer un résultat qu\'une fois tous les calculs terminés. Ceci est possible grâce à l\'utilisation d\'un tableau de promesses et de la fonction <code class="language-text">q.all</code> :</p>\n<div class="gatsby-highlight" data-language="javascript">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> q <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'q\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'q-io/fs\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> getSize <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'get-folder-size\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span>\n\nFolderAnalyzer<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sortFilesAndFolders</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">var</span> promises <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n    <span class="token comment">// self.files is an array of file name or folder name contained in current folder</span>\n    self<span class="token punctuation">.</span>files<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        promises<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>statFile<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>statFile<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                self<span class="token punctuation">.</span>filesSize <span class="token operator">+=</span> statFile<span class="token punctuation">.</span>size<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>statFile<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                 self<span class="token punctuation">.</span>foldersPath<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token punctuation">:</span> file<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> error<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> q<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Avec du recul cela peut sembler aller de soi, mais je dois bien avouer m\'être fait quelques noeuds à la tête au moment d\'aborder ces traitements asynchrones de fonctions via des promesses... (et merci <a href="https://twitter.com/RobinBressan">@Robin</a> pour ton aide).</p>\n<h2>Dessiner dans la console</h2>\n<p>Une fois les données recueillies, se pose la question de leur affichage sous forme graphique dans un terminal. Pour cela on peut utiliser <a href="https://github.com/asciimoo/drawille">drawille</a>, un projet initialement écrit en python permettant d\'utiliser les caractères Unicode destinés au braille pour dessiner dans la console via l\'api de <a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API">Canvas</a>. Le projet a été porté sur Go, Php, Ruby, ... et sur <a href="https://github.com/madbence/node-drawille">node.js</a>.</p>\n<p>Voici ce que cela peut donner :</p>\n<div class="gatsby-highlight" data-language="javascript">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> Canvas <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'drawille-canvas\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Canvas</span><span class="token punctuation">(</span><span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> <span class="token function-variable function">drawLeft</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    c<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    c<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    c<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    c<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    c<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    c<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    c<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    c<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    c<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    c<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span>\n\n<span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> now <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    c<span class="token punctuation">.</span>_canvas<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    c<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    c<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">drawLeft</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">drawRight</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">drawTop</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    c<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>_canvas<span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<img src="/images/blog/treedu2.png" class="small" >\n<h2>Dessiner dans la console avec drawille et d3.js</h2>\n<p>Il existe un projet bien connu dédié à la "data visualization" en javascript : <a href="http://d3js.org/">d3.js</a>. Pour faire très bref, d3 va permettre de :</p>\n<ul>\n<li>sélectionner un ou des éléments du DOM,</li>\n<li>associer des données à ces éléments (et, au besoin, en ajouter ou en supprimer),</li>\n<li>faciliter la transformation du tout en éléments graphiques de visualisation (courbes, donuts, graphes, ...).</li>\n</ul>\n<p>Pour cela, d3 dispose de toute une collection de helpers permettant entre autres de formater les données d\'entrées pour les rendre compatibles avec la visualisation (par exemple en coordonnées). Pour ceux qui ne connaissent pas d3, il en existe une multitude de présentations sur le web, dont cette <a href="http://www.youtube.com/watch?v=eO59HizTF8k">excellente vidéo</a> réalisée aux Apéros Web Nancy.</p>\n<p>Evidemment, avec une console, on ne dispose pas de DOM. Il va donc falloir ruser et utiliser le projet <a href="https://github.com/tmpvar/jsdom">jsdom</a> qui est une implémentation javascript du DOM, utilisable avec node.js.\nSecond petit point de bloquage : d3 dispose de beaucoup de méthodes pour générer des formes avec SVG, mais très peu avec Canvas. d3 étant un projet disposant d\'une bonne communauté, on trouve rapidement un plugin consacré à cette fonctionnalité : <a href="https://github.com/bspoon/d3-canvas">d3-canvas</a>.</p>\n<p>Voici ce que donne l\'implémentation du dessin du M précédent avec d3.js surchargé par le plugin d3-canvas, jsdom et drawille :</p>\n<div class="gatsby-highlight" data-language="javascript">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token string">\'use strict\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> d3 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./lib/d3Canvas\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> canvas <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'drawille-canvas\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">canvas</span><span class="token punctuation">(</span><span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> jsdom <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'jsdom\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span>  htmlStub <span class="token operator">=</span> <span class="token string">\'&lt;html>&lt;body>&lt;div id="canvas">&lt;/div>&lt;/body>&lt;/html>\'</span><span class="token punctuation">;</span>\n\njsdom<span class="token punctuation">.</span><span class="token function">env</span><span class="token punctuation">(</span><span class="token punctuation">{</span> features <span class="token punctuation">:</span> <span class="token punctuation">{</span> QuerySelector <span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> html <span class="token punctuation">:</span> htmlStub<span class="token punctuation">,</span>\n    done <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>errors<span class="token punctuation">,</span> window<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> canvasDom <span class="token operator">=</span> window<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">\'#canvas\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">var</span> line <span class="token operator">=</span> d3<span class="token punctuation">.</span>canvas<span class="token punctuation">.</span><span class="token function">line</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        context<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">var</span> leftSide <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">var</span> rightSide <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">var</span> top <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        d3<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>canvasDom<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> leftSide<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        d3<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>canvasDom<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> rightSide<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        d3<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>canvasDom<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> top<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>_canvas<span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h2>Retour au projet : changement de cap</h2>\n<p>A ce stade le projet était sur la bonne voie : on récupère les données (tailles des sous-répertoires en asynchrone), on traite ces données pour les rendre compatibles avec la visualisation graphique (d3.js) et on dispose d\'une méthode pour dessiner dans la console avec l\'api Canvas (drawille).\nL\'objectif initial était de reproduire un affichage à la "<a href="http://www.daisydiskapp.com">daisydisk</a>", en s\'aidant du layout <a href="http://bl.ocks.org/mbostock/4063423">Sunburst Partition</a> de d3.js.</p>\n<img src="/images/blog/treedu3.png" class="small" >\n<p>Mais plusieurs points bloquaient tout de même :</p>\n<ul>\n<li>la résolution de ce que l\'on affiche sous drawille est très faible, rendant difficile l\'affichage assez fin de type Sunburst,</li>\n<li>toute l\'api Canvas n\'est pas encore implémentée sous drawille pour node.js : on ne dispose pas de la méthode <code class="language-text">arc</code> indispensable à affichage de type sunburst,</li>\n<li>on ne dispose pas de la méthode <code class="language-text">fillText</code>,</li>\n<li>drawille ne gère pas les couleurs.</li>\n</ul>\n<p>Afin de s\'assurer un produit fonctionnel à la fin des 5 jours l\'objectif a donc été légèrement modifié en se réorientant vers le layout <a href="http://bl.ocks.org/mbostock/4063582">treemap</a> de d3.js :</p>\n<img src="/images/blog/treedu4.png" class="small" >\n<p>En effet, la méthode <code class="language-text">fillRect</code> (dessin de rectangle) est bien présente dans drawille. Voila ce que cela donne avec des données réelles :</p>\n<div class="gatsby-highlight" data-language="javascript">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token string">\'use strict\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> d3 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./lib/d3Canvas\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> canvas <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'drawille-canvas\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">canvas</span><span class="token punctuation">(</span><span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">320</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> <span class="token function-variable function">drawChart</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>treemapData<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> treemap <span class="token operator">=</span> d3<span class="token punctuation">.</span>layout<span class="token punctuation">.</span><span class="token function">treemap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> d<span class="token punctuation">.</span>children<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">160</span><span class="token punctuation">,</span><span class="token number">320</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> d<span class="token punctuation">.</span>size<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">mode</span><span class="token punctuation">(</span><span class="token string">\'squarify\'</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">nodes</span><span class="token punctuation">(</span>treemapData<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">function</span> <span class="token function">position</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        context<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>x<span class="token punctuation">,</span> d<span class="token punctuation">.</span>y<span class="token punctuation">,</span>\n        Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>dx<span class="token punctuation">)</span><span class="token punctuation">,</span>\n        Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>dy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        context<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>\n        Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>dx<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">,</span>\n        Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>dy<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    treemap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>_canvas<span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token function">getTreemapDataFromFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>drawChart<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<img src="/images/blog/treedu5.png" class="small" >\n<p>Pas franchement sexy et plus ennuyeux, pas très fonctionnel ...</p>\n<h2>Blessed</h2>\n<p>La preuve que l\'on peut utiliser node.js et d3.js pour dessiner dans la console a bien été faite. Mais les limitations de drawille (pas de texte, pas de couleur, résolution très faible) laissent tout de même une impression d\'inaccompli.\nAfin de rendre le produit final plus fonctionnel, le projet <a href="https://github.com/chjj/blessed">blessed</a> est venu à la rescousse. Il s\'agit d\'un portage de <a href="http://fr.wikipedia.org/wiki/Curses"><code class="language-text">curses</code></a> sur node.js qui va nous permettre d\'afficher du texte ou encore d\'ajouter de l\'interactivité.\nLe principe de <code class="language-text">blessed</code> est assez simple : on définit un <code class="language-text">screen</code> global dans lequel on va pouvoir disposer des boites et contrôler leur contenu. Le <code class="language-text">screen</code> dispose d\'un certain nombre de méthodes, incluant des évènements <code class="language-text">resize</code>, <code class="language-text">mouse</code> ou <code class="language-text">keypress</code>.</p>\n<center>\n<div class="video-container">\n<iframe src="//player.vimeo.com/video/107686699" width="500" height="281" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\n</div>\n</center>\n<h2>L\'application node.js en ligne de commande</h2>\n<p>Dernière touche au projet : rendre l\'application node.js disponible comme n\'importe quel utilitaire en ligne de commande.\nTout d\'abord il faut gérer les paramètres optionnels de la commande. <a href="https://github.com/visionmedia/commander.js/">commander.js</a> est l\'une des librairies disponibles permettant de gérer ces paramètres. Elle génère aussi le <code class="language-text">help</code> de la commande :</p>\n<div class="gatsby-highlight" data-language="javascript">\n      <pre class="language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> cli <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'commander\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token constant">VERSION</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./package.json\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>version<span class="token punctuation">;</span>\n\n    cli<span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">\'-p, --path  [path to folder]\'</span><span class="token punctuation">,</span> <span class="token string">\'folder path to display\'</span><span class="token punctuation">,</span> <span class="token string">\'./\'</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">\'-t, --theme  [name]\'</span><span class="token punctuation">,</span> <span class="token string">\'set the treedu theme [\'</span> <span class="token operator">+</span> themes <span class="token operator">+</span> <span class="token string">\']\'</span><span class="token punctuation">,</span> <span class="token string">\'marmelab\'</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token constant">VERSION</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span>\n    currentPath <span class="token operator">=</span> cli<span class="token punctuation">.</span>path<span class="token punctuation">;</span></code></pre>\n      </div>\n<img src="/images/blog/treedu7.png" class="medium" >\n<p>Ensuite, il faut rendre le script exécutable, et ajouter un <code class="language-text">shebang</code> en première ligne du script (cela permet au système de savoir quel interpreteur il doit utiliser pour executer le fichier).</p>\n<div class="gatsby-highlight" data-language="javascript">\n      <pre class="language-javascript"><code class="language-javascript">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>env node\n<span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span></code></pre>\n      </div>\n<p>Voici une version un peu "hackée" et déplacée dans un fichier spécifique <code class="language-text">bin/treedu.js</code> (rendant l\'exécutable distinct du script node.js).</p>\n<div class="gatsby-highlight" data-language="javascript">\n      <pre class="language-javascript"><code class="language-javascript">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>env node\n<span class="token string">\':\'</span> <span class="token comment">//; # This line below fixes xterm color bug on Mac - https://github.com/MrRio/vtop/issues/2</span>\n<span class="token string">\':\'</span> <span class="token comment">//; export TERM=xterm-256color</span>\n<span class="token string">\':\'</span> <span class="token comment">//; exec "$(command -v nodejs || command -v node)" "$0" "$@"</span>\n\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'../app.js\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Et pour finir, il faut ajouter dans le fichier <code class="language-text">package.json</code> une entrée <code class="language-text">bin</code> pointant vers ce fichier exécutable :</p>\n<div class="gatsby-highlight" data-language="javascript">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>\n  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"treedu"</span><span class="token punctuation">,</span>\n  <span class="token string">"version"</span><span class="token punctuation">:</span> <span class="token string">"0.0.3"</span><span class="token punctuation">,</span>\n  <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"Analyze disk usage, as du, but graphically as treemap, in terminal. The project use D3.js and node.js"</span><span class="token punctuation">,</span>\n  <span class="token string">"main"</span><span class="token punctuation">:</span> <span class="token string">"app.js"</span><span class="token punctuation">,</span>\n  <span class="token string">"preferGlobal"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token string">"test"</span><span class="token punctuation">:</span> <span class="token string">"make test"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string">"bin"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token string">"treedu"</span><span class="token punctuation">:</span> <span class="token string">"./bin/treedu.js"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span></code></pre>\n      </div>\n<p>On peut maintenant installer le script en global vie un <code class="language-text">npm install -g</code>.\nIl n\'y a plus qu\'à taper <code class="language-text">treedu</code> dans la console pour lancer le script.</p>\n<p>L\'ensemble du code du projet est disponible sur le GitHub de marmelab : <a href="https://github.com/marmelab/treedu">https://github.com/marmelab/treedu</a>.</p>\n<h2>Conclusion</h2>\n<p>Au final, le bilan du projet est en demi-teinte. C\'est un semi-echec tant l\'affichage graphique apporte peu à la fonctionnalité. La faute à la trop faible résolution induite par les caractères Unicode destinés au braille, à l\'impossibilité de gérer les couleurs au sein du graphique et à l\'impossibilité d\'écrire du texte autrement que point par point.\nMais également semi-succès puisque preuve est faite que l\'on peut utiliser node.js avec d3.js pour générer des graphiques dans la console, tant que l\'on souhaite visualiser une information ne demandant pas trop de précision.\nJ\'en veux pour exemple le vraiment très bon <a href="http://parall.ax/vtop">vtop</a> qui est à la commande <code class="language-text">top</code> ce que j\'aurais voulu que soit <code class="language-text">treedu</code> à <code class="language-text">du</code>.</p>',
frontmatter:{title:"Une console plus graphique avec node.js et d3.js",date:"2014-10-03",tags:["dataviz","d3-js","node-js","tutorial"],description:"\"Afficher graphiquement l'occupation disque d'un répertoire dans la console en Javascript\" : l'énoncé du problème est très motivant. Mais après 5 jours à en tenter l'implémentation, peut-on dire que node.js et d3.js sont utilisables pour des rendus graphiques dans un terminal ? Oui. Mais ..."}}},pathContext:{slug:"une-console-plus-graphique-avec-nodejs-et-d3js"}}}});
//# sourceMappingURL=path---une-console-plus-graphique-avec-nodejs-et-d-3-js-be0387b83319476bc82e.js.map